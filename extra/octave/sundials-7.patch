diff -ru octave-8.4.0.orig/m4/acinclude.m4 octave-8.4.0/m4/acinclude.m4
--- octave-8.4.0.orig/m4/acinclude.m4   2024-03-01 22:53:36.414820421 +0100
+++ octave-8.4.0/m4/acinclude.m4        2024-03-01 23:20:37.940576353 +0100
@@ -2458,7 +2458,7 @@
         #endif
         #include <assert.h>
         ]], [[
-        static_assert (sizeof (realtype) == sizeof (double),
+        static_assert (sizeof (sunrealtype) == sizeof (double),
                        "SUNDIALS is not configured for double precision");
       ]])],
       octave_cv_sundials_realtype_is_double=yes,
diff -ru octave-8.4.0.orig/libinterp/dldfcn/__ode15__.cc octave-8.4.0/libinterp/dldfcn/__ode15__.cc
--- octave-8.4.0.orig/libinterp/dldfcn/__ode15__.cc	2024-03-02 00:27:12.554813139 +0100
+++ octave-8.4.0/libinterp/dldfcn/__ode15__.cc	2024-03-02 00:28:44.585379000 +0100
@@ -120,7 +120,7 @@
 #    endif
 #  endif
 
-static inline realtype *
+static inline sunrealtype *
 nv_data_s (N_Vector& v)
 {
 #  if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
@@ -146,26 +146,26 @@
   typedef
   ColumnVector (*DAERHSFuncIDA) (const ColumnVector& x,
                                  const ColumnVector& xdot,
-                                 realtype t, const octave_value& idaf);
+                                 sunrealtype t, const octave_value& idaf);
 
   typedef
   Matrix (*DAEJacFuncDense) (const ColumnVector& x,
-                             const ColumnVector& xdot, realtype t,
-                             realtype cj, const octave_value& idaj);
+                             const ColumnVector& xdot, sunrealtype t,
+                             sunrealtype cj, const octave_value& idaj);
 
   typedef
   SparseMatrix (*DAEJacFuncSparse) (const ColumnVector& x,
                                     const ColumnVector& xdot,
-                                    realtype t, realtype cj,
+                                    sunrealtype t, sunrealtype cj,
                                     const octave_value& idaj);
 
   typedef
   Matrix (*DAEJacCellDense) (Matrix *dfdy, Matrix *dfdyp,
-                             realtype cj);
+                             sunrealtype cj);
 
   typedef
   SparseMatrix (*DAEJacCellSparse) (SparseMatrix *dfdy,
-                                    SparseMatrix *dfdyp, realtype cj);
+                                    SparseMatrix *dfdyp, sunrealtype cj);
 
   //Default
   IDA (void)
@@ -178,7 +178,7 @@
   { }
 
 
-  IDA (realtype t, ColumnVector y, ColumnVector yp,
+  IDA (sunrealtype t, ColumnVector y, ColumnVector yp,
        const octave_value& ida_fcn, DAERHSFuncIDA daefun)
     : m_t0 (t), m_y0 (y), m_yp0 (yp), m_havejac (false), m_havejacfcn (false),
       m_havejacsparse (false), m_mem (nullptr), m_num (), m_ida_fcn (ida_fcn),
@@ -266,20 +266,20 @@
   set_up (const ColumnVector& y);
 
   void
-  set_tolerance (ColumnVector& abstol, realtype reltol);
+  set_tolerance (ColumnVector& abstol, sunrealtype reltol);
 
   void
-  set_tolerance (realtype abstol, realtype reltol);
+  set_tolerance (sunrealtype abstol, sunrealtype reltol);
 
   static int
-  resfun (realtype t, N_Vector yy, N_Vector yyp,
+  resfun (sunrealtype t, N_Vector yy, N_Vector yyp,
           N_Vector rr, void *user_data);
 
   void
-  resfun_impl (realtype t, N_Vector& yy,
+  resfun_impl (sunrealtype t, N_Vector& yy,
                N_Vector& yyp, N_Vector& rr);
   static int
-  jacdense (realtype t, realtype cj, N_Vector yy, N_Vector yyp,
+  jacdense (sunrealtype t, sunrealtype cj, N_Vector yy, N_Vector yyp,
             N_Vector, SUNMatrix JJ, void *user_data, N_Vector,
             N_Vector, N_Vector)
   {
@@ -289,12 +289,12 @@
   }
 
   void
-  jacdense_impl (realtype t, realtype cj,
+  jacdense_impl (sunrealtype t, sunrealtype cj,
                  N_Vector& yy, N_Vector& yyp, SUNMatrix& JJ);
 
 #  if defined (HAVE_SUNDIALS_SUNLINSOL_KLU)
   static int
-  jacsparse (realtype t, realtype cj, N_Vector yy, N_Vector yyp,
+  jacsparse (sunrealtype t, sunrealtype cj, N_Vector yy, N_Vector yyp,
              N_Vector, SUNMatrix Jac, void *user_data, N_Vector,
              N_Vector, N_Vector)
   {
@@ -304,17 +304,17 @@
   }
 
   void
-  jacsparse_impl (realtype t, realtype cj,
+  jacsparse_impl (sunrealtype t, sunrealtype cj,
                   N_Vector& yy, N_Vector& yyp, SUNMatrix& Jac);
 #  endif
 
-  void set_maxstep (realtype maxstep);
+  void set_maxstep (sunrealtype maxstep);
 
-  void set_initialstep (realtype initialstep);
+  void set_initialstep (sunrealtype initialstep);
 
   bool
   interpolate (octave_idx_type& cont, Matrix& output, ColumnVector& tout,
-               int refine, realtype tend, bool haveoutputfcn,
+               int refine, sunrealtype tend, bool haveoutputfcn,
                bool haveoutputsel, const octave_value& output_fcn,
                ColumnVector& outputsel, bool haveeventfunction,
                const octave_value& event_fcn, ColumnVector& te,
@@ -325,17 +325,17 @@
 
   bool
   outputfun (const octave_value& output_fcn, bool haveoutputsel,
-             const ColumnVector& output, realtype tout, realtype tend,
+             const ColumnVector& output, sunrealtype tout, sunrealtype tend,
              ColumnVector& outputsel, const std::string& flag);
 
 
   bool
   event (const octave_value& event_fcn,
          ColumnVector& te, Matrix& ye, ColumnVector& ie,
-         realtype tsol, const ColumnVector& y, const std::string& flag,
+         sunrealtype tsol, const ColumnVector& y, const std::string& flag,
          const ColumnVector& yp, ColumnVector& oldval,
          ColumnVector& oldisterminal, ColumnVector& olddir,
-         octave_idx_type cont, octave_idx_type& temp, realtype told,
+         octave_idx_type cont, octave_idx_type& temp, sunrealtype told,
          ColumnVector& yold,
          const octave_idx_type num_event_args);
 
@@ -354,7 +354,7 @@
 
 private:
 
-  realtype m_t0;
+  sunrealtype m_t0;
   ColumnVector m_y0;
   ColumnVector m_yp0;
   bool m_havejac;
@@ -381,7 +381,7 @@
 };
 
 int
-IDA::resfun (realtype t, N_Vector yy, N_Vector yyp, N_Vector rr,
+IDA::resfun (sunrealtype t, N_Vector yy, N_Vector yyp, N_Vector rr,
              void *user_data)
 {
   IDA *self = static_cast <IDA *> (user_data);
@@ -390,7 +390,7 @@
 }
 
 void
-IDA::resfun_impl (realtype t, N_Vector& yy,
+IDA::resfun_impl (sunrealtype t, N_Vector& yy,
                   N_Vector& yyp, N_Vector& rr)
 {
   ColumnVector y = IDA::NVecToCol (yy, m_num);
@@ -399,7 +399,7 @@
 
   ColumnVector res = (*m_fcn) (y, yp, t, m_ida_fcn);
 
-  realtype *puntrr = nv_data_s (rr);
+  sunrealtype *puntrr = nv_data_s (rr);
 
   for (octave_idx_type i = 0; i < m_num; i++)
     puntrr[i] = res(i);
@@ -475,7 +475,7 @@
 }
 
 void
-IDA::jacdense_impl (realtype t, realtype cj,
+IDA::jacdense_impl (sunrealtype t, sunrealtype cj,
                     N_Vector& yy, N_Vector& yyp, SUNMatrix& JJ)
 
 {
@@ -500,7 +500,7 @@
 
 #  if defined (HAVE_SUNDIALS_SUNLINSOL_KLU)
 void
-IDA::jacsparse_impl (realtype t, realtype cj, N_Vector& yy, N_Vector& yyp,
+IDA::jacsparse_impl (sunrealtype t, sunrealtype cj, N_Vector& yy, N_Vector& yyp,
                      SUNMatrix& Jac)
 
 {
@@ -549,7 +549,7 @@
 IDA::NVecToCol (N_Vector& v, octave_f77_int_type n)
 {
   ColumnVector data (n);
-  realtype *punt = nv_data_s (v);
+  sunrealtype *punt = nv_data_s (v);
 
   for (octave_f77_int_type i = 0; i < n; i++)
     data(i) = punt[i];
@@ -562,7 +562,7 @@
 {
   N_Vector v = N_VNew_Serial (n OCTAVE_SUNCONTEXT);
 
-  realtype *punt = nv_data_s (v);
+  sunrealtype *punt = nv_data_s (v);
 
   for (octave_f77_int_type i = 0; i < n; i++)
     punt[i] = data(i);
@@ -602,7 +602,7 @@
 }
 
 void
-IDA::set_tolerance (ColumnVector& abstol, realtype reltol)
+IDA::set_tolerance (ColumnVector& abstol, sunrealtype reltol)
 {
   N_Vector abs_tol = ColToNVec (abstol, m_num);
 
@@ -613,7 +613,7 @@
 }
 
 void
-IDA::set_tolerance (realtype abstol, realtype reltol)
+IDA::set_tolerance (sunrealtype abstol, sunrealtype reltol)
 {
   if (IDASStolerances (m_mem, reltol, abstol) != 0)
     error ("IDA: Tolerance not set");
@@ -637,8 +637,8 @@
   std::string string = "";
   ColumnVector yold = y;
 
-  realtype tsol = tspan(0);
-  realtype tend = tspan(numt-1);
+  sunrealtype tsol = tspan(0);
+  sunrealtype tend = tspan(numt-1);
 
   N_Vector yyp = ColToNVec (yp, m_num);
 
@@ -792,11 +792,11 @@
 
 bool
 IDA::event (const octave_value& event_fcn,
-            ColumnVector& te, Matrix& ye, ColumnVector& ie, realtype tsol,
+            ColumnVector& te, Matrix& ye, ColumnVector& ie, sunrealtype tsol,
             const ColumnVector& y, const std::string& flag,
             const ColumnVector& yp, ColumnVector& oldval,
             ColumnVector& oldisterminal, ColumnVector& olddir,
-            octave_idx_type cont, octave_idx_type& temp, realtype told,
+            octave_idx_type cont, octave_idx_type& temp, sunrealtype told,
             ColumnVector& yold,
             const octave_idx_type num_event_args)
 {
@@ -905,7 +905,7 @@
 
 bool
 IDA::interpolate (octave_idx_type& cont, Matrix& output, ColumnVector& tout,
-                  int refine, realtype tend, bool haveoutputfcn,
+                  int refine, sunrealtype tend, bool haveoutputfcn,
                   bool haveoutputsel, const octave_value& output_fcn,
                   ColumnVector& outputsel, bool haveeventfunction,
                   const octave_value& event_fcn, ColumnVector& te,
@@ -914,7 +914,7 @@
                   octave_idx_type& temp, ColumnVector& yold,
                   const octave_idx_type num_event_args)
 {
-  realtype h = 0, tcur = 0;
+  sunrealtype h = 0, tcur = 0;
   bool status = false;
 
   N_Vector dky = N_VNew_Serial (m_num OCTAVE_SUNCONTEXT);
@@ -931,9 +931,9 @@
   if (IDAGetCurrentTime (m_mem, &tcur) != 0)
     error ("IDA failed to return the current time");
 
-  realtype tin = tcur - h;
+  sunrealtype tin = tcur - h;
 
-  realtype step = h / refine;
+  sunrealtype step = h / refine;
 
   for (octave_idx_type i = 1;
        i < refine && tin + step * i < tend && status == 0;
@@ -974,8 +974,8 @@
 
 bool
 IDA::outputfun (const octave_value& output_fcn, bool haveoutputsel,
-                const ColumnVector& yout, realtype tsol,
-                realtype tend, ColumnVector& outputsel,
+                const ColumnVector& yout, sunrealtype tsol,
+                sunrealtype tend, ColumnVector& outputsel,
                 const std::string& flag)
 {
   bool status = false;
@@ -1020,14 +1020,14 @@
 }
 
 void
-IDA::set_maxstep (realtype maxstep)
+IDA::set_maxstep (sunrealtype maxstep)
 {
   if (IDASetMaxStep (m_mem, maxstep) != 0)
     error ("IDA: Max Step not set");
 }
 
 void
-IDA::set_initialstep (realtype initialstep)
+IDA::set_initialstep (sunrealtype initialstep)
 {
   if (IDASetInitStep (m_mem, initialstep) != 0)
     error ("IDA: Initial Step not set");
@@ -1133,7 +1133,7 @@
 do_ode15 (const octave_value& ida_fcn,
           const ColumnVector& tspan,
           const octave_idx_type numt,
-          const realtype t0,
+          const sunrealtype t0,
           const ColumnVector& y0,
           const ColumnVector& yp0,
           const octave_scalar_map& options,
@@ -1191,7 +1191,7 @@
   dae.initialize ();
 
   // Set tolerances
-  realtype rel_tol = options.getfield ("RelTol").double_value ();
+  sunrealtype rel_tol = options.getfield ("RelTol").double_value ();
 
   bool haveabstolvec = options.getfield ("haveabstolvec").bool_value ();
 
@@ -1203,20 +1203,20 @@
     }
   else
     {
-      realtype abs_tol = options.getfield ("AbsTol").double_value ();
+      sunrealtype abs_tol = options.getfield ("AbsTol").double_value ();
 
       dae.set_tolerance (abs_tol, rel_tol);
     }
 
   //Set max step
-  realtype maxstep = options.getfield ("MaxStep").double_value ();
+  sunrealtype maxstep = options.getfield ("MaxStep").double_value ();
 
   dae.set_maxstep (maxstep);
 
   //Set initial step
   if (! options.getfield ("InitialStep").isempty ())
     {
-      realtype initialstep = options.getfield ("InitialStep").double_value ();
+      sunrealtype initialstep = options.getfield ("InitialStep").double_value ();
 
       dae.set_initialstep (initialstep);
     }
@@ -1301,7 +1301,7 @@
 
   octave_idx_type numt = tspan.numel ();
 
-  realtype t0 = tspan(0);
+  sunrealtype t0 = tspan(0);
 
   if (numt < 2)
     error ("__ode15__: TRANGE must contain at least 2 elements");
