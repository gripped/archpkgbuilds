cmake_minimum_required(VERSION 3.20)

file(READ "src/version.h" ver)
if (NOT ${ver} MATCHES "COMPILER_VERSION \"([0-9]+.[0-9]+.[0-9]+)\"")
    message(FATAL_ERROR "Compiler version could not be parsed from version.h")
endif()

project(c3c VERSION ${CMAKE_MATCH_1})
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--as-needed")
message("C3C version: ${CMAKE_PROJECT_VERSION}")

if (CMAKE_VERSION VERSION_GREATER_EQUAL "3.24.0")
    cmake_policy(SET CMP0135 NEW)
endif()

if (NOT DEFINED CMAKE_INSTALL_LIBDIR)
    set(CMAKE_INSTALL_LIBDIR "/usr/local/lib/c3")
    set(CMAKE_INSTALL_BINDIR "/usr/local/bin/c3c")
endif()

include(FetchContent)
include(FeatureSummary)

set(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)
set(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -fno-exceptions")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-3 -fno-exceptions")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -gdwarf-3 -O3 -fno-exceptions")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -gdwarf-3 -fno-exceptions")

option(C3_LINK_DYNAMIC "link dynamically with LLVM/LLD libs")

set(C3_LLVM_VERSION "auto" CACHE STRING "Use LLVM version [default: auto]")
option(C3_USE_MIMALLOC "Use built-in mimalloc" OFF)
option(C3_USE_TB "Use TB" OFF)
set(C3_MIMALLOC_TAG "v1.7.3" CACHE STRING "Used version of mimalloc")

if(C3_USE_MIMALLOC)
    option(MI_BUILD_TESTS OFF)
    option(MI_BUILD_SHARED OFF)
    option(MI_PADDING OFF)
    option(MI_DEBUG_FULL OFF)
    FetchContent_Declare(
        mimalloc
        GIT_REPOSITORY https://github.com/microsoft/mimalloc.git
        GIT_TAG ${C3_MIMALLOC_TAG}
    )
    FetchContent_MakeAvailable(mimalloc)
endif()

find_package(CURL)

if (NOT C3_LLVM_VERSION STREQUAL "auto")
    if (${C3_LLVM_VERSION} VERSION_LESS 15 OR ${C3_LLVM_VERSION} VERSION_GREATER 19)
        message(FATAL_ERROR "LLVM ${C3_LLVM_VERSION} is not supported!")
    endif()
endif()

find_package(Git QUIET)
if(C3_USE_TB AND GIT_FOUND AND EXISTS "${CMAKE_SOURCE_DIR}/.git")
    option(GIT_SUBMODULE "Check submodules during build" ON)
    if(GIT_SUBMODULE)
        message(STATUS "Submodule update")
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
            message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
        endif()
    endif()
endif()

if (NOT C3_LLVM_VERSION STREQUAL "auto")
    find_package(LLVM ${C3_LLVM_VERSION} REQUIRED CONFIG)
else()
    find_package(LLVM REQUIRED CONFIG)
endif()

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
message(STATUS "Libraries located in: ${LLVM_LIBRARY_DIRS}")

if(LLVM_ENABLE_RTTI)
    message(STATUS "LLVM was built with RTTI")
else()
    message(STATUS "LLVM was not built with RTTI")
endif()

include_directories(${LLVM_INCLUDE_DIRS})
link_directories(${LLVM_LIBRARY_DIRS})
add_definitions(${LLVM_DEFINITIONS})

# Add the LLVM libraries directly to the target_link_libraries
set(llvm_libs LLVM)
set(lld_libs lldCOFF lldCommon lldELF lldMachO lldMinGW lldWasm)

add_library(c3c_wrappers STATIC wrapper/src/wrapper.cpp)
add_library(miniz STATIC dependencies/miniz/miniz.c)

add_executable(c3c
    src/build/builder.c
    src/build/build_options.c
    src/build/project_creation.c
    src/build/libraries.c
    src/compiler/ast.c
    src/compiler/bigint.c
    src/compiler/codegen_general.c
    src/compiler/compiler.c
    src/compiler/compiler.h
    src/compiler/context.c
    src/compiler/copying.c
    src/compiler/diagnostics.c
    src/compiler/float.c
    src/compiler/headers.c
    src/compiler/json_output.c
    src/compiler/lexer.c
    src/compiler/linker.c
    src/compiler/llvm_codegen.c
    src/compiler/abi/c_abi_aarch64.c
    src/compiler/abi/c_abi.c
    src/compiler/abi/c_abi_riscv.c
    src/compiler/abi/c_abi_wasm.c
    src/compiler/abi/c_abi_win64.c
    src/compiler/abi/c_abi_x64.c
    src/compiler/abi/c_abi_x86.c
    src/compiler/llvm_codegen_debug_info.c
    src/compiler/llvm_codegen_expr.c
    src/compiler/llvm_codegen_function.c
    src/compiler/llvm_codegen_instr.c
    src/compiler/llvm_codegen_module.c
    src/compiler/llvm_codegen_stmt.c
    src/compiler/llvm_codegen_type.c
    src/compiler/llvm_codegen_value.c
    src/compiler/module.c
    src/compiler/number.c
    src/compiler/parse_expr.c
    src/compiler/parse_global.c
    src/compiler/parser.c
    src/compiler/parser_internal.h
    src/compiler/parse_stmt.c
    src/compiler/sema_casts.c
    src/compiler/sema_decls.c
    src/compiler/sema_expr.c
    src/compiler/sema_internal.h
    src/compiler/sema_name_resolution.c
    src/compiler/sema_errors.c
    src/compiler/sema_builtins.c
    src/compiler/sema_initializers.c
    src/compiler/semantic_analyser.c
    src/compiler/sema_passes.c
    src/compiler/sema_stmts.c
    src/compiler/sema_types.c
    src/compiler/source_file.c
    src/compiler/symtab.c
    src/compiler/target.c
    src/compiler/sema_asm.c
    src/compiler_tests/benchmark.c
    src/compiler_tests/tests.c
    src/compiler/tokens.c
    src/compiler/types.c
    src/main.c
    src/utils/errors.c
    src/utils/file_utils.c
    src/utils/find_msvc.c
    src/utils/malloc.c
    src/utils/stringutils.c
    src/utils/taskqueue.c
    src/utils/json.c
    src/build/project.c
    src/utils/vmem.c
    src/utils/whereami.c
    src/utils/cpus.c
    src/utils/unzipper.c
    src/compiler/decltable.c
    src/compiler/mac_support.c
    src/compiler/llvm_codegen_storeload.c
    src/compiler/windows_support.c
    src/compiler/codegen_asm.c
    src/compiler/asm_target.c
    src/compiler/llvm_codegen_builtins.c
    src/compiler/expr.c
    src/utils/time.c
    src/utils/http.c
    src/compiler/sema_liveness.c
    src/build/common_build.c
)

if (C3_USE_TB)
    file(GLOB tilde-sources
        tilde-backend/src/tb/*.c
        tilde-backend/src/tb/codegen/*.c
        tilde-backend/src/tb/bigint/*.c
        tilde-backend/src/tb/objects/*.c
        tilde-backend/src/tb/system/*.c
        tilde-backend/src/tb/debug/cv/*.c
        tilde-backend/src/tb/opt/*.c
        tilde-backend/src/tb/x64/*.c
        tilde-backend/src/tb/wasm/*.c
        tilde-backend/src/tb/aarch64/*.c
    )
    target_sources(c3c PRIVATE
        src/compiler/tilde_codegen.c
        src/compiler/tilde_codegen_instr.c
        src/compiler/tilde_codegen_value.c
        src/compiler/tilde_codegen_storeload.c
        src/compiler/tilde_codegen_expr.c
        src/compiler/tilde_codegen_stmt.c
        src/compiler/tilde_codegen_type.c
        src/compiler/tilde_codegen_abi.c
        src/compiler/tilde_codegen_storeload.c
    )

    target_compile_definitions(c3c PUBLIC TB_AVAILABLE=1)
    target_link_libraries(c3c tilde-backend)
    add_library(tilde-backend STATIC ${tilde-sources})
    target_include_directories(tilde-backend PRIVATE "${CMAKE_SOURCE_DIR}/tilde-backend/src/" "${CMAKE_SOURCE_DIR}/tilde-backend/include")

    target_include_directories(c3c PRIVATE "${CMAKE_SOURCE_DIR}/tilde-backend/include/")
else()
    target_compile_definitions(c3c PUBLIC TB_AVAILABLE=0)
endif()

target_include_directories(c3c PRIVATE "${CMAKE_SOURCE_DIR}/src/")
target_include_directories(c3c_wrappers PRIVATE "${CMAKE_SOURCE_DIR}/wrapper/src/")
target_include_directories(miniz PUBLIC "${CMAKE_SOURCE_DIR}/dependencies/miniz/")

target_link_libraries(c3c_wrappers ${llvm_libs} ${lld_libs})
target_link_libraries(c3c ${llvm_libs} miniz c3c_wrappers ${lld_libs})

if(C3_USE_MIMALLOC)
    target_link_libraries(c3c mimalloc-static)
endif()

if (CURL_FOUND)
    target_link_libraries(c3c ${CURL_LIBRARIES})
    target_include_directories(c3c PRIVATE ${CURL_INCLUDES})
    target_compile_definitions(c3c PUBLIC CURL_FOUND=1)
else()
    target_compile_definitions(c3c PUBLIC CURL_FOUND=0)
endif()

install(TARGETS c3c DESTINATION bin)
install(DIRECTORY lib/ DESTINATION lib/c3)
