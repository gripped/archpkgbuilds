From f46b7cd4149f657cdd2b16b9868d1bc1f3bcd650 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Thu, 13 Jun 2024 16:55:25 +0200
Subject: [PATCH] Make the preferences window scrollable vertically

This allows to fit the window's height into small screens. Also, make it a usual window to allow users to switch between windows.
---
 app/preferences.js      | 11 ++++++++---
 emulateX11WindowType.js |  8 +++++---
 2 files changed, 13 insertions(+), 6 deletions(-)

diff --git a/app/preferences.js b/app/preferences.js
index c6517a3..790b23a 100644
--- a/app/preferences.js
+++ b/app/preferences.js
@@ -79,19 +79,24 @@ function init(path) {
  */
 function showPreferences() {
     if (prefsWindow) {
+        prefsWindow.present();
         return;
     }
     prefsWindow = new Gtk.Window({
-        resizable: false,
         window_position: Gtk.WindowPosition.CENTER,
     });
     prefsWindow.connect('destroy', () => {
         prefsWindow = null;
     });
     prefsWindow.set_title(_('Settings'));
-    DesktopIconsUtil.windowHidePagerTaskbarModal(prefsWindow, true);
+    let scrolledWindow = new Gtk.ScrolledWindow();
+    scrolledWindow.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC);
     let frame = PrefsWindow.preferencesFrame(Gtk, desktopSettings, nautilusSettings, gtkSettings);
-    prefsWindow.add(frame);
+    scrolledWindow.add(frame);
+    prefsWindow.add(scrolledWindow);
+    frame.connect('size-allocate', (widget, allocation) => {
+        prefsWindow.set_default_size(-1, allocation.height + 20);
+    });
     prefsWindow.show_all();
 }
 
diff --git a/emulateX11WindowType.js b/emulateX11WindowType.js
index acae59a..4ebfa5c 100644
--- a/emulateX11WindowType.js
+++ b/emulateX11WindowType.js
@@ -66,16 +66,18 @@ class ManageWindow {
             }
         }));
         this._signalIDs.push(window.connect('notify::minimized', () => {
-            this._window.unminimize();
+            if (this._fixed) {
+                this._window.unminimize();
+            }
         }));
         this._signalIDs.push(window.connect('notify::maximized-vertically', () => {
-            if (!window.maximized_vertically) {
+            if (this._fixed && !window.maximized_vertically) {
                 window.maximize(Meta.MaximizeFlags.VERTICAL);
             }
             this._moveIntoPlace();
         }));
         this._signalIDs.push(window.connect('notify::maximized-horizontally', () => {
-            if (!window.maximized_horizontally) {
+            if (this._fixed && !window.maximized_horizontally) {
                 window.maximize(Meta.MaximizeFlags.HORIZONTAL);
             }
             this._moveIntoPlace();
-- 
2.45.1

