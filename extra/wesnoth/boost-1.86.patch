diff --git a/src/server/common/server_base.cpp b/src/server/common/server_base.cpp
index 51f77969683..742a5cefe1c 100644
--- a/src/server/common/server_base.cpp
+++ b/src/server/common/server_base.cpp
@@ -81,10 +81,10 @@ server_base::server_base(unsigned short port, bool keep_alive)
 void server_base::start_server()
 {
 	boost::asio::ip::tcp::endpoint endpoint_v6(boost::asio::ip::tcp::v6(), port_);
-	boost::asio::spawn(io_service_, [this, endpoint_v6](boost::asio::yield_context yield) { serve(yield, acceptor_v6_, endpoint_v6); });
+	boost::asio::spawn(io_service_, [this, endpoint_v6](boost::asio::yield_context yield) { serve(yield, acceptor_v6_, endpoint_v6); }, boost::coroutines::attributes());
 
 	boost::asio::ip::tcp::endpoint endpoint_v4(boost::asio::ip::tcp::v4(), port_);
-	boost::asio::spawn(io_service_, [this, endpoint_v4](boost::asio::yield_context yield) { serve(yield, acceptor_v4_, endpoint_v4); });
+	boost::asio::spawn(io_service_, [this, endpoint_v4](boost::asio::yield_context yield) { serve(yield, acceptor_v4_, endpoint_v4); }, boost::coroutines::attributes());
 
 	handshake_response_ = htonl(42);
 
@@ -122,7 +122,7 @@ void server_base::serve(boost::asio::yield_context yield, boost::asio::ip::tcp::
 	}
 
 	if(accepting_connections()) {
-		boost::asio::spawn(io_service_, [this, &acceptor, endpoint](boost::asio::yield_context yield) { serve(yield, acceptor, endpoint); });
+		boost::asio::spawn(io_service_, [this, &acceptor, endpoint](boost::asio::yield_context yield) { serve(yield, acceptor, endpoint); }, boost::coroutines::attributes());
 	} else {
 		return;
 	}
@@ -566,7 +566,7 @@ template<class SocketPtr> void server_base::async_send_doc_queued(SocketPtr sock
 	boost::asio::spawn(
 		io_service_, [this, doc_ptr = doc.clone(), socket](boost::asio::yield_context yield) mutable {
 			send_doc_queued(socket, doc_ptr, yield);
-		}
+		}, boost::coroutines::attributes()
 	);
 }
 
diff --git a/src/server/wesnothd/server.cpp b/src/server/wesnothd/server.cpp
index 7aabdcd4142..6f30b122f89 100644
--- a/src/server/wesnothd/server.cpp
+++ b/src/server/wesnothd/server.cpp
@@ -668,12 +668,12 @@ void server::refresh_tournaments(const boost::system::error_code& ec)
 
 void server::handle_new_client(socket_ptr socket)
 {
-	boost::asio::spawn(io_service_, [socket, this](boost::asio::yield_context yield) { login_client(yield, socket); });
+	boost::asio::spawn(io_service_, [socket, this](boost::asio::yield_context yield) { login_client(yield, socket); }, boost::coroutines::attributes());
 }
 
 void server::handle_new_client(tls_socket_ptr socket)
 {
-	boost::asio::spawn(io_service_, [socket, this](boost::asio::yield_context yield) { login_client(yield, socket); });
+	boost::asio::spawn(io_service_, [socket, this](boost::asio::yield_context yield) { login_client(yield, socket); }, boost::coroutines::attributes());
 }
 
 template<class SocketPtr>
@@ -773,7 +773,7 @@ void server::login_client(boost::asio::yield_context yield, SocketPtr socket)
 			default_max_messages_,
 			default_time_period_,
 			is_moderator
-		}](boost::asio::yield_context yield) { handle_player(yield, socket, new_player); }
+		}](boost::asio::yield_context yield) { handle_player(yield, socket, new_player); }, boost::coroutines::attributes()
 	);
 
 	LOG_SERVER << log_address(socket) << "\t" << username << "\thas logged on"
