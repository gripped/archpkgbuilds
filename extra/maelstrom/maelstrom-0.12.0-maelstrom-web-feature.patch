diff --git i/crates/maelstrom-broker/Cargo.toml w/crates/maelstrom-broker/Cargo.toml
index 2499879e..f8d6282c 100644
--- i/crates/maelstrom-broker/Cargo.toml
+++ w/crates/maelstrom-broker/Cargo.toml
@@ -11,18 +11,22 @@ repository.workspace = true
 rust-version.workspace = true
 version.workspace = true
 
+[features]
+default = ["web-ui"]
+web-ui = [ "dep:hyper-tungstenite", "dep:hyper", "dep:maelstrom-web"]
+
 [dependencies]
 anyhow.workspace = true
 bytesize.workspace = true
 clap.workspace = true
 derive_more.workspace = true
 futures.workspace = true
-hyper-tungstenite.workspace = true
-hyper.workspace = true
+hyper-tungstenite = { workspace = true, optional = true }
+hyper = { workspace = true, optional = true }
 maelstrom-base.workspace = true
 maelstrom-macro.workspace = true
 maelstrom-util.workspace = true
-maelstrom-web.workspace = true
+maelstrom-web = { workspace = true, optional = true }
 serde.workspace = true
 tar.workspace = true
 tempfile.workspace = true
diff --git i/crates/maelstrom-broker/src/config.rs w/crates/maelstrom-broker/src/config.rs
index 27e88658..2e985bac 100644
--- i/crates/maelstrom-broker/src/config.rs
+++ w/crates/maelstrom-broker/src/config.rs
@@ -41,10 +41,12 @@ impl FromStr for BrokerPort {
     }
 }
 
+#[cfg(feature = "web-ui")]
 #[derive(Deserialize, From)]
 #[serde(from = "u16")]
 pub struct HttpPort(u16);
 
+#[cfg(feature = "web-ui")]
 impl HttpPort {
     pub fn inner(&self) -> &u16 {
         &self.0
@@ -55,12 +57,14 @@ impl HttpPort {
     }
 }
 
+#[cfg(feature = "web-ui")]
 impl Debug for HttpPort {
     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), fmt::Error> {
         Debug::fmt(&self.0, f)
     }
 }
 
+#[cfg(feature = "web-ui")]
 impl FromStr for HttpPort {
     type Err = <u16 as FromStr>::Err;
     fn from_str(slots: &str) -> result::Result<Self, Self::Err> {
@@ -75,6 +79,7 @@ pub struct Config {
     pub port: BrokerPort,
 
     /// The port the HTTP UI is served on.
+    #[cfg(feature = "web-ui")]
     #[config(short = 'H', value_name = "PORT", default = "0")]
     pub http_port: HttpPort,
 
diff --git i/crates/maelstrom-broker/src/lib.rs w/crates/maelstrom-broker/src/lib.rs
index ee8ae012..02e2fe9d 100644
--- i/crates/maelstrom-broker/src/lib.rs
+++ w/crates/maelstrom-broker/src/lib.rs
@@ -4,6 +4,7 @@ mod artifact_fetcher;
 mod artifact_pusher;
 pub mod config;
 mod connection;
+#[cfg(feature = "web-ui")]
 mod http;
 mod scheduler_task;
 
@@ -56,11 +57,16 @@ async fn stats_heartbeat(sender: SchedulerSender) {
     }
 }
 
+struct Listeners {
+    listener: TcpListener,
+    #[cfg(feature = "web-ui")]
+    http_listener: TcpListener,
+}
+
 /// The main function for the broker. It will return when a signal is received, or when the broker
 /// or http listener socket returns an error at accept time.
 async fn main_inner_inner(
-    listener: TcpListener,
-    http_listener: TcpListener,
+    listeners: Listeners,
     cache_root: RootBuf<CacheDir>,
     cache_size: CacheSize,
     log: Logger,
@@ -72,14 +78,15 @@ async fn main_inner_inner(
 
     let mut join_set = JoinSet::new();
 
+    #[cfg(feature = "web-ui")]
     join_set.spawn(http::listener_main(
-        http_listener,
+        listeners.http_listener,
         scheduler_task.scheduler_sender().clone(),
         id_vendor.clone(),
         log.clone(),
     ));
     join_set.spawn(connection::listener_main(
-        listener,
+        listeners.listener,
         scheduler_task.scheduler_sender().clone(),
         id_vendor,
         scheduler_task.cache_tmp_path().to_owned(),
@@ -105,38 +112,59 @@ pub fn main(config: Config, log: Logger) -> Result<()> {
     main_inner(config, log)
 }
 
-#[tokio::main]
-async fn main_inner(config: Config, log: Logger) -> Result<()> {
+#[cfg(feature = "web-ui")]
+async fn start_listeners(config: &Config, log: &Logger) -> Result<Listeners> {
     let sock_addr = SocketAddrV6::new(Ipv6Addr::UNSPECIFIED, *config.port.inner(), 0, 0);
     let listener = TcpListener::bind(sock_addr)
         .await
         .context("binding listener socket")?;
+    let listener_addr = listener
+        .local_addr()
+        .context("retrieving listener local address")?;
 
     let sock_addr = SocketAddrV6::new(Ipv6Addr::UNSPECIFIED, *config.http_port.inner(), 0, 0);
     let http_listener = TcpListener::bind(sock_addr)
         .await
         .context("binding http listener socket")?;
-
-    let listener_addr = listener
-        .local_addr()
-        .context("retrieving listener local address")?;
     let http_listener_addr = http_listener
         .local_addr()
-        .context("retrieving listener local address")?;
+        .context("retrieving http listener local address")?;
+
     info!(log, "started";
         "config" => ?config,
         "addr" => listener_addr,
         "http_addr" => http_listener_addr,
         "pid" => process::id());
 
-    main_inner_inner(
+    Ok(Listeners {
         listener,
         http_listener,
-        config.cache_root,
-        config.cache_size,
-        log.clone(),
-    )
-    .await;
+    })
+}
+
+#[cfg(not(feature = "web-ui"))]
+async fn start_listeners(config: &Config, log: &Logger) -> Result<Listeners> {
+    let sock_addr = SocketAddrV6::new(Ipv6Addr::UNSPECIFIED, *config.port.inner(), 0, 0);
+    let listener = TcpListener::bind(sock_addr)
+        .await
+        .context("binding listener socket")?;
+    let listener_addr = listener
+        .local_addr()
+        .context("retrieving listener local address")?;
+
+    info!(log, "started";
+         "config" => ?config,
+         "addr" => listener_addr,
+         "pid" => process::id());
+
+    Ok(Listeners { listener })
+}
+
+#[tokio::main]
+async fn main_inner(config: Config, log: Logger) -> Result<()> {
+    let listeners = start_listeners(&config, &log).await?;
+
+    main_inner_inner(listeners, config.cache_root, config.cache_size, log.clone()).await;
     info!(log, "exiting");
     Ok(())
 }
