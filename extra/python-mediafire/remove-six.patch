--- a/mediafire/api.py
+++ b/mediafire/api.py
@@ -6,9 +6,8 @@ import hashlib
 import requests
 import logging
 
-import six
 
-from six.moves.urllib.parse import urlencode
+from urllib.parse import urlencode
 
 from requests_toolbelt import MultipartEncoder
 
@@ -148,7 +147,7 @@ class MediaFireApi(object):  # pylint: disable=too-many-public-methods
 
         uri = self._build_uri(action)
 
-        if isinstance(params, six.text_type):
+        if isinstance(params, str):
             query = params
         else:
             query = self._build_query(uri, params, action_token_type)
@@ -183,7 +182,7 @@ class MediaFireApi(object):  # pylint: disable=too-many-public-methods
         try:
             # bytes from now on
             url = (API_BASE + uri).encode('utf-8')
-            if isinstance(data, six.text_type):
+            if isinstance(data, str):
                 # request's data is bytes, dict, or filehandle
                 data = data.encode('utf-8')
 
--- a/mediafire/client.py
+++ b/mediafire/client.py
@@ -8,7 +8,7 @@ import logging
 import requests
 import posixpath
 
-from six.moves.urllib.parse import urlparse
+from urllib.parse import urlparse
 
 from mediafire.api import (MediaFireApi, MediaFireApiError)
 from mediafire.uploader import (MediaFireUploader, UploadSession)
--- a/mediafire/media/conversion_server_client.py
+++ b/mediafire/media/conversion_server_client.py
@@ -7,7 +7,7 @@ from __future__ import unicode_literals
 import logging
 import requests
 
-from six.moves.urllib.parse import urlencode
+from urllib.parse import urlencode
 
 from mediafire.api import QueryParams
 
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,3 +1,2 @@
 requests>=2.4.1,!=2.11.2
 requests_toolbelt>=0.3.1
-six>=1.8.0
--- a/setup.py
+++ b/setup.py
@@ -14,7 +14,6 @@ setup(
     install_requires=[
         'requests',
         'requests_toolbelt',
-        'six',
     ],
     keywords="mediafire cloud files sdk storage api upload",
     classifiers=[
