diff --git a/src/backend/datasources/filters/OdsFilter.cpp b/src/backend/datasources/filters/OdsFilter.cpp
index 52d604bd9..64493b9db 100644
--- a/src/backend/datasources/filters/OdsFilter.cpp
+++ b/src/backend/datasources/filters/OdsFilter.cpp
@@ -299,13 +299,13 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 
 			auto type = model.get_celltype(pos);
 			switch (type) {
-			case ixion::celltype_t::string:
+			case ixion::cell_t::string:
 				columnModes[col] = AbstractColumn::ColumnMode::Text;
 				break;
-			case ixion::celltype_t::numeric: // numeric values are always double (can't detect if integer)
+			case ixion::cell_t::numeric: // numeric values are always double (can't detect if integer)
 				// default: Double
 				break;
-			case ixion::celltype_t::formula: {
+			case ixion::cell_t::formula: {
 				auto formula = model.get_formula_result(pos);
 				switch (formula.get_type()) { // conside formula type
 				case ixion::formula_result::result_type::value:
@@ -324,9 +324,9 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 				}
 				break;
 			}
-			case ixion::celltype_t::boolean:
-			case ixion::celltype_t::empty:
-			case ixion::celltype_t::unknown: // default: Double
+			case ixion::cell_t::boolean:
+			case ixion::cell_t::empty:
+			case ixion::cell_t::unknown: // default: Double
 				break;
 			}
 		}
@@ -339,17 +339,17 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 
 			auto type = model.get_celltype(pos);
 			switch (type) {
-			case ixion::celltype_t::string: {
+			case ixion::cell_t::string: {
 				auto value = model.get_string_value(pos);
 				vectorNames << QString::fromStdString(std::string(value));
 				break;
 			}
-			case ixion::celltype_t::numeric: {
+			case ixion::cell_t::numeric: {
 				double value = model.get_numeric_value(pos);
 				vectorNames << QLocale().toString(value);
 				break;
 			}
-			case ixion::celltype_t::formula: {
+			case ixion::cell_t::formula: {
 				auto formula = model.get_formula_result(pos);
 				switch (formula.get_type()) {
 				case ixion::formula_result::result_type::value: {
@@ -371,9 +371,9 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 				// TODO
 				break;
 			}
-			case ixion::celltype_t::empty:
-			case ixion::celltype_t::unknown:
-			case ixion::celltype_t::boolean:
+			case ixion::cell_t::empty:
+			case ixion::cell_t::unknown:
+			case ixion::cell_t::boolean:
 				vectorNames << AbstractFileFilter::convertFromNumberToColumn(ranges.first.column + startColumn - 1 + col);
 				;
 			}
@@ -402,7 +402,7 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 
 			auto type = model.get_celltype(pos);
 			switch (type) {
-			case ixion::celltype_t::numeric: {
+			case ixion::cell_t::numeric: {
 				double value = model.get_numeric_value(pos);
 				// column mode may be non-numeric
 				if (columnModes.at(col) == AbstractColumn::ColumnMode::Double)
@@ -411,7 +411,7 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 					(*static_cast<QVector<QString>*>(dataContainer[col]))[row] = QLocale().toString(value);
 				break;
 			}
-			case ixion::celltype_t::formula: {
+			case ixion::cell_t::formula: {
 				// read formula result. We can't handle formulas yet (?)
 				auto formula = model.get_formula_result(pos);
 				switch (formula.get_type()) {
@@ -442,7 +442,7 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 				}
 				break;
 			}
-			case ixion::celltype_t::string: {
+			case ixion::cell_t::string: {
 				// column mode may be numeric
 				if (columnModes.at(col) == AbstractColumn::ColumnMode::Double)
 					(*static_cast<QVector<double>*>(dataContainer[col]))[row] = model.get_numeric_value(pos);
@@ -450,10 +450,10 @@ void OdsFilterPrivate::readCurrentSheet(const QString& fileName, AbstractDataSou
 					(*static_cast<QVector<QString>*>(dataContainer[col]))[row] = QString::fromStdString(std::string(model.get_string_value(pos)));
 				break;
 			}
-			case ixion::celltype_t::empty: // nothing to do
+			case ixion::cell_t::empty: // nothing to do
 				break;
-			case ixion::celltype_t::unknown:
-			case ixion::celltype_t::boolean:
+			case ixion::cell_t::unknown:
+			case ixion::cell_t::boolean:
 				DEBUG(Q_FUNC_INFO << ", cell type unknown or boolean not supported yet.")
 			}
 		}
@@ -506,19 +506,19 @@ QVector<QStringList> OdsFilterPrivate::preview(const QString& sheetName, int lin
 
 			auto type = model.get_celltype(pos);
 			switch (type) {
-			case ixion::celltype_t::string: {
+			case ixion::cell_t::string: {
 				auto value = model.get_string_value(pos);
 				DEBUG(Q_FUNC_INFO << " " << value)
 				line << QString::fromStdString(std::string(value));
 				break;
 			}
-			case ixion::celltype_t::numeric: {
+			case ixion::cell_t::numeric: {
 				double value = model.get_numeric_value(pos);
 				DEBUG(Q_FUNC_INFO << " " << value)
 				line << QLocale().toString(value);
 				break;
 			}
-			case ixion::celltype_t::formula: {
+			case ixion::cell_t::formula: {
 				// read formula result. We can't handle formulas yet (?)
 				auto formula = model.get_formula_result(pos);
 				switch (formula.get_type()) {
@@ -538,11 +538,11 @@ QVector<QStringList> OdsFilterPrivate::preview(const QString& sheetName, int lin
 				}
 				break;
 			}
-			case ixion::celltype_t::empty:
+			case ixion::cell_t::empty:
 				line << QString();
 				break;
-			case ixion::celltype_t::unknown:
-			case ixion::celltype_t::boolean:
+			case ixion::cell_t::unknown:
+			case ixion::cell_t::boolean:
 				line << QString();
 				DEBUG(Q_FUNC_INFO << ", cell type unknown or boolean not implemented yet.")
 				break;
