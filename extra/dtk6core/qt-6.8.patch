diff --git a/src/dci/private/ddcifileengine.cpp b/src/dci/private/ddcifileengine.cpp
index bf2090d..e05672c 100644
--- a/src/dci/private/ddcifileengine.cpp
+++ b/src/dci/private/ddcifileengine.cpp
@@ -30,14 +30,13 @@ Q_LOGGING_CATEGORY(logFE, "dtk.dci.fileengine", QtInfoMsg)
 #define DCI_FILE_SCHEME "dci:"
 #define DCI_FILE_SUFFIX ".dci"
 
-QAbstractFileEngine *DDciFileEngineHandler::create(const QString &fileName) const
+std::unique_ptr<QAbstractFileEngine> DDciFileEngineHandler::create(const QString &fileName) const
 {
     if (!fileName.startsWith(QStringLiteral(DCI_FILE_SCHEME)))
         return nullptr;
 
-    DDciFileEngine *engine = new DDciFileEngine(fileName);
+    std::unique_ptr<DDciFileEngine> engine(new DDciFileEngine(fileName));
     if (!engine->isValid()) {
-        delete engine;
         return nullptr;
     }
 
@@ -65,19 +64,13 @@ static DDciFileShared getDciFile(const QString &dciFilePath, bool usePath = true
     return shared;
 }
 
-DDciFileEngineIterator::DDciFileEngineIterator(QDir::Filters filters, const QStringList &nameFilters)
-    : QAbstractFileEngineIterator(filters, nameFilters)
+DDciFileEngineIterator::DDciFileEngineIterator(QDirListing::IteratorFlags filters, const QStringList &nameFilters)
+    : QAbstractFileEngineIterator(nullptr, filters, nameFilters)
 {
 
 }
 
-QString DDciFileEngineIterator::next()
-{
-    current = nextValid;
-    return DDciFileEngineIterator::currentFileName();
-}
-
-bool DDciFileEngineIterator::hasNext() const
+bool DDciFileEngineIterator::advance()
 {
     if (!file) {
         const auto paths = DDciFileEngine::resolvePath(path());
@@ -111,6 +104,7 @@ bool DDciFileEngineIterator::hasNext() const
             continue;
 
         nextValid = i;
+        current = nextValid;
         return true;
     }
 
@@ -543,12 +537,12 @@ QDateTime DDciFileEngine::fileTime(QAbstractFileEngine::FileTime time) const
 }
 #endif
 
-DDciFileEngine::Iterator *DDciFileEngine::beginEntryList(QDir::Filters filters, const QStringList &filterNames)
+QAbstractFileEngine::IteratorUniquePtr DDciFileEngine::beginEntryList(const QString &path, QDirListing::IteratorFlags filters, const QStringList &filterNames)
 {
-    return new DDciFileEngineIterator(filters, filterNames);
+    return QAbstractFileEngine::IteratorUniquePtr(new DDciFileEngineIterator(filters, filterNames));
 }
 
-DDciFileEngine::Iterator *DDciFileEngine::endEntryList()
+QAbstractFileEngine::IteratorUniquePtr DDciFileEngine::endEntryList()
 {
     return nullptr;
 }
diff --git a/src/dci/private/ddcifileengine_p.h b/src/dci/private/ddcifileengine_p.h
index 143365d..4aa7023 100644
--- a/src/dci/private/ddcifileengine_p.h
+++ b/src/dci/private/ddcifileengine_p.h
@@ -24,7 +24,7 @@ DCORE_BEGIN_NAMESPACE
 class DDciFileEngineHandler : public QAbstractFileEngineHandler
 {
 public:
-    QAbstractFileEngine *create(const QString &fileName) const override;
+    std::unique_ptr<QAbstractFileEngine> create(const QString &fileName) const override;
 };
 
 class DDciFile;
@@ -33,11 +33,9 @@ class DDciFileEngineIterator : public QAbstractFileEngineIterator
 {
     friend class DDciFileEngine;
 public:
-    DDciFileEngineIterator(QDir::Filters filters, const QStringList &nameFilters);
-
-    QString next() override;
-    bool hasNext() const override;
+    DDciFileEngineIterator(QDirListing::IteratorFlags filters, const QStringList &nameFilters);
 
+    bool advance() override;
     QString currentFileName() const override;
 
 private:
@@ -102,8 +100,8 @@ public:
 #endif
 
     typedef DDciFileEngineIterator Iterator;
-    Iterator *beginEntryList(QDir::Filters filters, const QStringList &filterNames) override;
-    Iterator *endEntryList() override;
+    IteratorUniquePtr beginEntryList(const QString &path, QDirListing::IteratorFlags filters, const QStringList &filterNames) override;
+    IteratorUniquePtr endEntryList() override;
 
     qint64 read(char *data, qint64 maxlen) override;
     qint64 write(const char *data, qint64 len) override;
diff --git a/src/filesystem/dcapfsfileengine.cpp b/src/filesystem/dcapfsfileengine.cpp
index 933616b..66ed0bb 100644
--- a/src/filesystem/dcapfsfileengine.cpp
+++ b/src/filesystem/dcapfsfileengine.cpp
@@ -14,24 +14,9 @@ DCORE_BEGIN_NAMESPACE
 extern QString _d_cleanPath(const QString &path);
 extern bool _d_isSubFileOf(const QString &filePath, const QString &directoryPath);
 
-static bool capDirIteraterHasNext(QAbstractFileEngineIterator *it)
+std::unique_ptr<QAbstractFileEngine> DCapFSFileEngineHandler::create(const QString &fileName) const
 {
-    const QStringList &paths = DCapManager::instance()->paths();
-    QString path = it->path();
-    QFileInfo info(path);
-    if (info.isSymLink())
-        info = QFileInfo{info.symLinkTarget()};
-
-    bool ret = std::any_of(paths.cbegin(), paths.cend(), std::bind(_d_isSubFileOf, path, std::placeholders::_1));
-
-    if (!ret)
-        return ret;
-    return DVtableHook::callOriginalFun(it, &QAbstractFileEngineIterator::hasNext);
-}
-
-QAbstractFileEngine *DCapFSFileEngineHandler::create(const QString &fileName) const
-{
-    return new DCapFSFileEngine(fileName);
+    return std::unique_ptr<QAbstractFileEngine>(new DCapFSFileEngine(fileName));
 }
 
 
@@ -210,10 +195,9 @@ QStringList DCapFSFileEngine::entryList(QDir::Filters filters, const QStringList
     return QFSFileEngine::entryList(filters, filterNames);
 }
 
-QAbstractFileEngine::Iterator *DCapFSFileEngine::beginEntryList(QDir::Filters filters, const QStringList &filterNames)
+QAbstractFileEngine::IteratorUniquePtr DCapFSFileEngine::beginEntryList(const QString &path, QDirListing::IteratorFlags filters, const QStringList &filterNames)
 {
-    auto ret = QFSFileEngine::beginEntryList(filters, filterNames);
-    DVtableHook::overrideVfptrFun(ret, &QAbstractFileEngineIterator::hasNext, &capDirIteraterHasNext);
+    auto ret = QFSFileEngine::beginEntryList(path, filters, filterNames);
     return ret;
 }
 
diff --git a/src/filesystem/private/dcapfsfileengine_p.h b/src/filesystem/private/dcapfsfileengine_p.h
index 3a4a06b..8f49ba6 100644
--- a/src/filesystem/private/dcapfsfileengine_p.h
+++ b/src/filesystem/private/dcapfsfileengine_p.h
@@ -14,7 +14,7 @@ DCORE_BEGIN_NAMESPACE
 class DCapFSFileEngineHandler : public QAbstractFileEngineHandler
 {
 public:
-    QAbstractFileEngine *create(const QString &fileName) const override;
+    std::unique_ptr<QAbstractFileEngine> create(const QString &fileName) const override;
 };
 
 class DCapFSFileEnginePrivate;
@@ -47,7 +47,7 @@ public:
     bool cloneTo(QAbstractFileEngine *target) override;
     bool setSize(qint64 size) override;
     QStringList entryList(QDir::Filters filters, const QStringList &filterNames) const override;
-    Iterator *beginEntryList(QDir::Filters filters, const QStringList &filterNames) override;
+    IteratorUniquePtr beginEntryList(const QString &path, QDirListing::IteratorFlags filters, const QStringList &filterNames) override;
 
     bool canReadWrite(const QString &path) const;
 };
