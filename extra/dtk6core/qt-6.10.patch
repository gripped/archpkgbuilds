diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 41cc25d..952b33b 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -7,6 +7,9 @@ set(CMAKE_AUTOUIC ON)
 set(CMAKE_AUTORCC ON)
 
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)
+if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS CorePrivate REQUIRED)
+endif()
 find_package(Dtk${DTK_VERSION_MAJOR}Log REQUIRED)
 find_package(DBus1 REQUIRED)
 if(LINUX)
@@ -15,6 +18,9 @@ if(LINUX)
   if("${QT_VERSION_MAJOR}" STREQUAL "5")
       pkg_check_modules(QGSettings REQUIRED IMPORTED_TARGET gsettings-qt) #Dtk6 removed.
   endif()
+  if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS DBusPrivate REQUIRED)
+  endif()
 
 endif()
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Xml)
diff --git a/src/dci/private/ddcifileengine.cpp b/src/dci/private/ddcifileengine.cpp
index d111f0a..3834ed2 100644
--- a/src/dci/private/ddcifileengine.cpp
+++ b/src/dci/private/ddcifileengine.cpp
@@ -621,10 +621,20 @@ bool DDciFileEngine::supportsExtension(QAbstractFileEngine::Extension extension)
     return extension == AtEndExtension;
 }
 
-bool DDciFileEngine::cloneTo(QAbstractFileEngine *target)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 10, 0)
+    QAbstractFileEngine::TriStateResult DDciFileEngine::cloneTo(QAbstractFileEngine *target)
+#else
+    bool DDciFileEngine::cloneTo(QAbstractFileEngine *target)
+#endif
 {
     const QByteArray &data = file->dataRef(subfilePath);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 10, 0)
+    if (target->write(data.constData(), data.size()) == data.size())
+        return TriStateResult::Success;
+    return TriStateResult::Failed;
+#else
     return target->write(data.constData(), data.size()) == data.size();
+#endif
 }
 
 bool DDciFileEngine::forceSave(bool writeFile) const
diff --git a/src/dci/private/ddcifileengine_p.h b/src/dci/private/ddcifileengine_p.h
index 4413c92..6b89d78 100644
--- a/src/dci/private/ddcifileengine_p.h
+++ b/src/dci/private/ddcifileengine_p.h
@@ -129,7 +129,11 @@ public:
                    ExtensionReturn *output = 0) override;
     bool supportsExtension(Extension extension) const override;
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 10, 0)
+    QAbstractFileEngine::TriStateResult cloneTo(QAbstractFileEngine *target) override;
+#else
     bool cloneTo(QAbstractFileEngine *target) override;
+#endif
 
 private:
     bool forceSave(bool writeFile = false) const;
diff --git a/src/filesystem/dcapfsfileengine.cpp b/src/filesystem/dcapfsfileengine.cpp
index ee826bf..7ba2bef 100644
--- a/src/filesystem/dcapfsfileengine.cpp
+++ b/src/filesystem/dcapfsfileengine.cpp
@@ -195,12 +195,20 @@ QAbstractFileEngine::FileFlags DCapFSFileEngine::fileFlags(QAbstractFileEngine::
     return ret;
 }
 
-bool DCapFSFileEngine::cloneTo(QAbstractFileEngine *target)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 10, 0)
+    QAbstractFileEngine::TriStateResult DCapFSFileEngine::cloneTo(QAbstractFileEngine *target)
+#else
+    bool DCapFSFileEngine::cloneTo(QAbstractFileEngine *target)
+#endif
 {
     D_DC(DCapFSFileEngine);
     const QString targetPath = target->fileName(DCapFSFileEngine::AbsolutePathName);
     if (!d->canReadWrite(targetPath))
+#if QT_VERSION >= QT_VERSION_CHECK(6, 10, 0)
+        return TriStateResult::Failed;
+#else
         return false;
+#endif
     return QFSFileEngine::cloneTo(target);
 }
 
diff --git a/src/filesystem/private/dcapfsfileengine_p.h b/src/filesystem/private/dcapfsfileengine_p.h
index ea9d593..736f51b 100644
--- a/src/filesystem/private/dcapfsfileengine_p.h
+++ b/src/filesystem/private/dcapfsfileengine_p.h
@@ -48,7 +48,11 @@ public:
 #endif
     bool rmdir(const QString &dirName, bool recurseParentDirectories) const override;
     FileFlags fileFlags(FileFlags type) const override;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 10, 0)
+    QAbstractFileEngine::TriStateResult cloneTo(QAbstractFileEngine *target) override;
+#else
     bool cloneTo(QAbstractFileEngine *target) override;
+#endif
     bool setSize(qint64 size) override;
     QStringList entryList(QDir::Filters filters, const QStringList &filterNames) const override;
 #if QT_VERSION >= QT_VERSION_CHECK(6, 8, 1)
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 144c029..cc329a6 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -14,6 +14,9 @@ add_link_options(-fsanitize=address)
 
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Gui)
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)
+if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS CorePrivate REQUIRED)
+endif()
 
 if(LINUX)
     find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS DBus)
@@ -21,6 +24,9 @@ if(LINUX)
     if("${QT_VERSION_MAJOR}" STREQUAL "5")
         pkg_check_modules(QGSettings REQUIRED IMPORTED_TARGET gsettings-qt)
     endif()
+    if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+        find_package(Qt${QT_VERSION_MAJOR} COMPONENTS CorePrivate REQUIRED)
+    endif()
 endif()
 
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Xml)
diff --git a/tools/dci/CMakeLists.txt b/tools/dci/CMakeLists.txt
index 652066e..33f60bb 100644
--- a/tools/dci/CMakeLists.txt
+++ b/tools/dci/CMakeLists.txt
@@ -3,6 +3,9 @@ set(BIN_NAME ${TARGET_NAME}${DTK_VERSION_MAJOR})
 
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)
+if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS CorePrivate REQUIRED)
+endif()
 add_definitions(-DDTK_NO_PROJECT)
 # start dci
 include(../../src/dci/dci.cmake)
diff --git a/tools/deepin-os-release/CMakeLists.txt b/tools/deepin-os-release/CMakeLists.txt
index 9a13828..3b4cc0d 100644
--- a/tools/deepin-os-release/CMakeLists.txt
+++ b/tools/deepin-os-release/CMakeLists.txt
@@ -4,6 +4,9 @@ set(BIN_NAME ${TARGET_NAME}${DTK_VERSION_MAJOR})
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 set(CMAKE_AUTOMOC ON)
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)
+if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS CorePrivate REQUIRED)
+endif()
 add_definitions(-DDTK_NO_PROJECT)
 # start dci
 set(dci_SRCS
diff --git a/tools/qdbusxml2cpp/CMakeLists.txt b/tools/qdbusxml2cpp/CMakeLists.txt
index 50ee0a0..c687d0b 100644
--- a/tools/qdbusxml2cpp/CMakeLists.txt
+++ b/tools/qdbusxml2cpp/CMakeLists.txt
@@ -4,6 +4,9 @@ set(BIN_NAME ${TARGET_NAME}${DTK_VERSION_MAJOR})
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)
 find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS DBus)
+if(Qt${QT_VERSION_MAJOR}_VERSION VERSION_GREATER_EQUAL 6.10)
+  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS DBusPrivate REQUIRED)
+endif()
 
 add_executable(${BIN_NAME}
   qdbusxml2cpp.cpp
