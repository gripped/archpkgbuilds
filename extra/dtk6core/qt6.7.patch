diff --git a/tools/qdbusxml2cpp/qdbusxml2cpp.cpp b/tools/qdbusxml2cpp/qdbusxml2cpp.cpp
index c900165..fdd6fc6 100644
--- a/tools/qdbusxml2cpp/qdbusxml2cpp.cpp
+++ b/tools/qdbusxml2cpp/qdbusxml2cpp.cpp
@@ -330,14 +330,16 @@ static QByteArray qtTypeName(const QString &signature, const QDBusIntrospection:
         QString annotationName = QString::fromLatin1("org.qtproject.QtDBus.QtTypeName");
         if (paramId >= 0)
             annotationName += QString::fromLatin1(".%1%2").arg(QLatin1String(direction)).arg(paramId);
-        QString qttype = annotations.value(annotationName);
+        auto annotation = annotations.value(annotationName);
+        QString qttype = annotation.value;
         if (!qttype.isEmpty())
             return qttype.toLatin1();
 
         QString oldAnnotationName = QString::fromLatin1("com.trolltech.QtDBus.QtTypeName");
         if (paramId >= 0)
             oldAnnotationName += QString::fromLatin1(".%1%2").arg(QLatin1String(direction)).arg(paramId);
-        qttype = annotations.value(oldAnnotationName);
+        annotation = annotations.value(oldAnnotationName);                                         
+        qttype = annotation.value;
 
         if (qttype.isEmpty()) {
             fprintf(stderr, "Got unknown type `%s'\n", qPrintable(signature));
@@ -448,43 +450,43 @@ static void writeArgList(QTextStream &ts, const QStringList &argNames,
 
 static QString propertyGetter(const QDBusIntrospection::Property &property)
 {
-    QString getter = property.annotations.value(QLatin1String("org.qtproject.QtDBus.PropertyGetter"));
-    if (!getter.isEmpty())
-        return getter;
+    auto annotation = property.annotations.value("org.qtproject.QtDBus.PropertyGetter");
+    if (!annotation.value.isEmpty())
+        return annotation.value;
 
-    getter = property.annotations.value(QLatin1String("com.trolltech.QtDBus.propertyGetter"));
-    if (!getter.isEmpty()) {
+    annotation = property.annotations.value("com.trolltech.QtDBus.propertyGetter");
+    if (!annotation.value.isEmpty()) {
         fprintf(stderr, "Warning: deprecated annotation 'com.trolltech.QtDBus.propertyGetter' found;"
                         " suggest updating to 'org.qtproject.QtDBus.PropertyGetter'\n");
-        return getter;
+        return annotation.value;
     }
 
-    getter = property.name;
+    QString getter = property.name;
     getter[0] = getter[0].toLower();
     return getter;
 }
 
 static QString propertySetter(const QDBusIntrospection::Property &property)
 {
-    QString setter = property.annotations.value(QLatin1String("org.qtproject.QtDBus.PropertySetter"));
-    if (!setter.isEmpty())
-        return setter;
+    auto annotation = property.annotations.value("org.qtproject.QtDBus.PropertySetter");
+    if (!annotation.value.isEmpty())
+        return annotation.value;
 
-    setter = property.annotations.value(QLatin1String("com.trolltech.QtDBus.propertySetter"));
-    if (!setter.isEmpty()) {
+    annotation = property.annotations.value("com.trolltech.QtDBus.propertySetter");
+    if (!annotation.value.isEmpty()) {
         fprintf(stderr, "Warning: deprecated annotation 'com.trolltech.QtDBus.propertySetter' found;"
                         " suggest updating to 'org.qtproject.QtDBus.PropertySetter'\n");
-        return setter;
+        return annotation.value;
     }
 
-    setter = QLatin1String("set") + property.name;
+    QString setter = QLatin1String("set") + property.name;
     setter[3] = setter[3].toUpper();
     return setter;
 }
 
 static QString propertyNotifier(const QDBusIntrospection::Property &property)
 {
-    QString notifier = property.annotations.value(QLatin1String("org.qtproject.QtDBus.PropertyNotifier"));
+    QString notifier = property.annotations.value("org.qtproject.QtDBus.PropertyNotifier").value;
     if (!notifier.isEmpty())
         return notifier;
 
@@ -495,7 +497,7 @@ static QString propertyNotifier(const QDBusIntrospection::Property &property)
 
 static QString methodName(const QDBusIntrospection::Method &method)
 {
-    QString name = method.annotations.value(QStringLiteral("org.qtproject.QtDBus.MethodName"));
+    QString name = method.annotations.value(QStringLiteral("org.qtproject.QtDBus.MethodName")).value;
     if (!name.isEmpty())
         return name;
 
@@ -818,9 +820,9 @@ static void writeProxy(const QString &filename, const QDBusIntrospection::Interf
         // methods:
         hs << "public Q_SLOTS: // METHODS" << endl;
         foreach (const QDBusIntrospection::Method &method, interface->methods) {
-            bool isDeprecated = method.annotations.value(QLatin1String("org.freedesktop.DBus.Deprecated")) == QLatin1String("true");
-            bool isNoReply =
-                method.annotations.value(QLatin1String(ANNOTATION_NO_WAIT)) == QLatin1String("true");
+            bool isDeprecated = method.annotations.value("org.freedesktop.DBus.Deprecated").value
+                    == "true";
+            bool isNoReply = method.annotations.value(ANNOTATION_NO_WAIT).value == "true";
             if (isNoReply && !method.outputArgs.isEmpty()) {
                 fprintf(stderr, "warning: method %s in interface %s is marked 'no-reply' but has output arguments.\n",
                         qPrintable(method.name), qPrintable(interface->name));
@@ -940,7 +942,7 @@ static void writeProxy(const QString &filename, const QDBusIntrospection::Interf
         hs << "Q_SIGNALS: // SIGNALS" << endl;
         foreach (const QDBusIntrospection::Signal &signal, interface->signals_) {
             hs << "    ";
-            if (signal.annotations.value(QLatin1String("org.freedesktop.DBus.Deprecated")) == QLatin1String("true"))
+            if (signal.annotations.value("org.freedesktop.DBus.Deprecated").value == "true")
                 hs << "Q_DECL_DEPRECATED ";
 
             hs << "void " << signal.name << "(";
@@ -1241,7 +1243,7 @@ static void writeAdaptor(const QString &filename, const QDBusIntrospection::Inte
         hs << "public Q_SLOTS: // METHODS" << endl;
         foreach (const QDBusIntrospection::Method &method, interface->methods) {
             bool isNoReply =
-                method.annotations.value(QLatin1String(ANNOTATION_NO_WAIT)) == QLatin1String("true");
+                method.annotations.value(ANNOTATION_NO_WAIT).value == "true";
             if (isNoReply && !method.outputArgs.isEmpty()) {
                 fprintf(stderr, "warning: method %s in interface %s is marked 'no-reply' but has output arguments.\n",
                         qPrintable(method.name), qPrintable(interface->name));
@@ -1249,7 +1251,7 @@ static void writeAdaptor(const QString &filename, const QDBusIntrospection::Inte
             }
 
             hs << "    ";
-            if (method.annotations.value(QLatin1String("org.freedesktop.DBus.Deprecated")) == QLatin1String("true"))
+            if (method.annotations.value("org.freedesktop.DBus.Deprecated").value == "true")
                 hs << "Q_DECL_DEPRECATED ";
 
             QByteArray returnType;
@@ -1349,7 +1351,7 @@ static void writeAdaptor(const QString &filename, const QDBusIntrospection::Inte
         hs << "Q_SIGNALS: // SIGNALS" << endl;
         foreach (const QDBusIntrospection::Signal &signal, interface->signals_) {
             hs << "    ";
-            if (signal.annotations.value(QLatin1String("org.freedesktop.DBus.Deprecated")) == QLatin1String("true"))
+            if (signal.annotations.value("org.freedesktop.DBus.Deprecated").value == "true")
                 hs << "Q_DECL_DEPRECATED ";
 
             hs << "void " << signal.name << "(";
