diff --git a/src/util/private/dbuiltiniconengine.cpp b/src/util/private/dbuiltiniconengine.cpp
index a71d7b2..18f2133 100644
--- a/src/util/private/dbuiltiniconengine.cpp
+++ b/src/util/private/dbuiltiniconengine.cpp
@@ -50,7 +50,7 @@ public:
         }
     }
 
-    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state) override {
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state, qreal scale) override {
         Q_UNUSED(state)
 
         QPixmap pm;
@@ -111,7 +111,7 @@ public:
         return dir.filePath("normal." + suffix);
     }
 
-    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state) override {
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state, qreal scale) override {
         if (iconFileMap.isEmpty()) {
             const QString &suffix = QFileInfo(filename).suffix();
             QDir dir(filename);
@@ -128,7 +128,7 @@ public:
 
         reader.setFileName(iconFileMap.value(mode << 8 | state));
 
-        return ImageEntry::pixmap(size, mode, state);
+        return ImageEntry::pixmap(size, mode, state, scale);
     }
 
     QMap<qint16, QString> iconFileMap;
@@ -192,7 +192,7 @@ QPixmap DBuiltinIconEngine::pixmap(const QSize &size, QIcon::Mode mode,
 
     QIconLoaderEngineEntry *entry = QIconLoaderEngine::entryForSize(m_info, size);
     if (entry)
-        return entry->pixmap(size, mode, state);
+        return entry->pixmap(size, mode, state, 1.0);
 
     return QPixmap();
 }
@@ -222,7 +222,7 @@ void DBuiltinIconEngine::paint(QPainter *painter, const QRect &rect,
         QIcon(bgFileName).paint(painter, rect, Qt::AlignCenter, mode, state);
     }
 
-    QPixmap pm = entry->pixmap(pixmapSize, mode, state);
+    QPixmap pm = entry->pixmap(pixmapSize, mode, state, 1.0);
     ImageEntry::Type type = static_cast<ImageEntry *>(entry)->type;
     if (type == ImageEntry::TextType || (type == ImageEntry::ActionType && mode != QIcon::Normal)) {
         QPainter pa(&pm);
@@ -386,7 +386,7 @@ void DBuiltinIconEngine::virtual_hook(int id, void *data)
         // QIcon::pixmap() multiplies size by the device pixel ratio.
         const int integerScale = qCeil(arg.scale);
         QIconLoaderEngineEntry *entry = QIconLoaderEngine::entryForSize(m_info, arg.size / integerScale, integerScale);
-        arg.pixmap = entry ? entry->pixmap(arg.size, arg.mode, arg.state) : QPixmap();
+        arg.pixmap = entry ? entry->pixmap(arg.size, arg.mode, arg.state, 1.0) : QPixmap();
     }
     break;
     default:
diff --git a/tests/src/ut_builtinengine.cpp b/tests/src/ut_builtinengine.cpp
index f729d7c..797b91c 100644
--- a/tests/src/ut_builtinengine.cpp
+++ b/tests/src/ut_builtinengine.cpp
@@ -60,7 +60,7 @@ TEST_F(ut_DBuiltinIconEngine, loadIcon)
     ASSERT_EQ(entry->dir.path, builtinActionPath);
     ASSERT_EQ(entry->dir.size, ICONSIZE);
     ASSERT_EQ(entry->dir.type, QIconDirInfo::Scalable);
-    ASSERT_FALSE(entry->pixmap(QSize(ICONSIZE, ICONSIZE), QIcon::Normal, QIcon::On).isNull());
+    ASSERT_FALSE(entry->pixmap(QSize(ICONSIZE, ICONSIZE), QIcon::Normal, QIcon::On, 1.0).isNull());
 
 #if QT_VERSION < QT_VERSION_CHECK(6, 4, 0)
     for (auto item : themeInfo.entries) {
