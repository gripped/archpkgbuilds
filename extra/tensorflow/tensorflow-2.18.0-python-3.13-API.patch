diff --git a/tensorflow/python/eager/pywrap_tensor.cc b/tensorflow/python/eager/pywrap_tensor.cc
index e04ad38b..ca46be8e 100644
--- a/tensorflow/python/eager/pywrap_tensor.cc
+++ b/tensorflow/python/eager/pywrap_tensor.cc
@@ -47,6 +47,31 @@ limitations under the License.
 #include "tensorflow/python/lib/core/pybind11_status.h"
 #include "tensorflow/python/lib/core/safe_pyobject_ptr.h"
 
+static int
+PyArg_NoKeywords(const char *funcname, PyObject *kwargs)
+{
+#if PY_VERSION_HEX >= 0x030D0000 // >= Python 3.13
+    /* Based on the one in CPython, removed from the public headers in 3.13
+     * (https://github.com/python/cpython/issues/110964)
+     */
+    if (kwargs == NULL)
+        return 1;
+    if (!PyDict_CheckExact(kwargs)) {
+        PyErr_BadInternalCall();
+        return 0;
+    }
+    if (PyDict_GET_SIZE(kwargs) == 0)
+        return 1;
+
+    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments", funcname);
+    return 0;
+#else
+    return _PyArg_NoKeywords(funcname, kwargs);
+#endif
+}
+
+
+
 // forward declare
 struct EagerTensor;
 namespace tensorflow {
@@ -686,7 +711,7 @@ static int EagerTensor_settensor_shape(EagerTensor* self, PyObject* value,
 // Function `_copy_to_device`.
 static PyObject* EagerTensor_copy_to_device(EagerTensor* self, PyObject* args,
                                             PyObject* kwds) {
-  if (!_PyArg_NoKeywords("copy_to_device", kwds)) return nullptr;
+  if (!PyArg_NoKeywords("copy_to_device", kwds)) return nullptr;
 
   const char* device_name = nullptr;
   if (!PyArg_ParseTuple(args, "O&:copy_to_device", ConvertDeviceName,
@@ -873,8 +898,10 @@ static int EagerTensor_traverse(PyObject* self, visitproc visit, void* arg) {
 #if PY_VERSION_HEX < 0x030C0000  // < Python 3.12
   PyObject*& dict = *_PyObject_GetDictPtr(self);
   Py_VISIT(dict);
-#else
+#elif PY_VERSION_HEX < 0x030d0000 // < Python 3.13
   _PyObject_VisitManagedDict(self, visit, arg);
+#else
+  PyObject_VisitManagedDict(self, visit, arg);
 #endif  // PY_VERSION_HEX < 0x030C0000
   Py_VISIT(((EagerTensor*)self)->handle_data);
   Py_VISIT(((EagerTensor*)self)->tensor_shape);
@@ -896,8 +923,10 @@ extern int EagerTensor_clear(PyObject* self) {
 #if PY_VERSION_HEX < 0x030C0000  // < Python 3.12
   PyObject*& dict = *_PyObject_GetDictPtr(self);
   Py_CLEAR(dict);
-#else
+#elif PY_VERSION_HEX < 0x030D0000 // < Python 3.13
   _PyObject_ClearManagedDict(self);
+#else
+  PyObject_ClearManagedDict(self);
 #endif  // PY_VERSION_HEX < 0x030C0000
 
   Py_CLEAR(((EagerTensor*)self)->handle_data);
