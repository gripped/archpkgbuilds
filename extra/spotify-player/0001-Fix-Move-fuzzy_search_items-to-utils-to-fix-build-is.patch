From 77af13b48b2a03e61fef1cffea899929057551dc Mon Sep 17 00:00:00 2001
From: Dragonfly911117 <55215882+Dragonfly911117@users.noreply.github.com>
Date: Mon, 1 Sep 2025 23:35:57 +0800
Subject: [PATCH] Fix: Move `fuzzy_search_items` to `utils` to fix build issue
 with `fzf` feature (#823)

---
 .github/workflows/ci.yml           |  2 +-
 spotify_player/src/state/ui/mod.rs | 18 ------------------
 spotify_player/src/utils.rs        | 19 +++++++++++++++++++
 3 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 48123fcd..45ea6cff 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -9,7 +9,7 @@ on:
 env:
   CARGO_TERM_COLOR: always
   RUST_BACKTRACE: 1
-  RUST_FEATURES: "rodio-backend,media-control,image,notify"
+  RUST_FEATURES: "rodio-backend,media-control,image,notify,fzf"
 
 jobs:
   rust-ci:
diff --git a/spotify_player/src/state/ui/mod.rs b/spotify_player/src/state/ui/mod.rs
index 1e627505..f44a6840 100644
--- a/spotify_player/src/state/ui/mod.rs
+++ b/spotify_player/src/state/ui/mod.rs
@@ -97,26 +97,8 @@ impl UIState {
     }
 }
 
-#[cfg(feature = "fzf")]
-use fuzzy_matcher::skim::SkimMatcherV2;
 use ratatui::layout::Rect;
 
-#[cfg(feature = "fzf")]
-fn fuzzy_search_items<'a, T: std::fmt::Display>(items: &'a [T], query: &str) -> Vec<&'a T> {
-    let matcher = SkimMatcherV2::default();
-    let mut result = items
-        .iter()
-        .filter_map(|t| {
-            matcher
-                .fuzzy(&t.to_string(), query, false)
-                .map(|(score, _)| (t, score))
-        })
-        .collect::<Vec<_>>();
-
-    result.sort_by(|(_, a), (_, b)| b.cmp(a));
-    result.into_iter().map(|(t, _)| t).collect::<Vec<_>>()
-}
-
 impl Default for UIState {
     fn default() -> Self {
         Self {
diff --git a/spotify_player/src/utils.rs b/spotify_player/src/utils.rs
index cc90731d..f7c80690 100644
--- a/spotify_player/src/utils.rs
+++ b/spotify_player/src/utils.rs
@@ -50,6 +50,25 @@ pub fn parse_uri(uri: &str) -> Cow<'_, str> {
     }
 }
 
+#[cfg(feature = "fzf")]
+use fuzzy_matcher::skim::SkimMatcherV2;
+
+#[cfg(feature = "fzf")]
+pub fn fuzzy_search_items<'a, T: std::fmt::Display>(items: &'a [T], query: &str) -> Vec<&'a T> {
+    let matcher = SkimMatcherV2::default();
+    let mut result = items
+        .iter()
+        .filter_map(|t| {
+            matcher
+                .fuzzy(&t.to_string(), query, false)
+                .map(|(score, _)| (t, score))
+        })
+        .collect::<Vec<_>>();
+
+    result.sort_by(|(_, a), (_, b)| b.cmp(a));
+    result.into_iter().map(|(t, _)| t).collect::<Vec<_>>()
+}
+
 /// Get a list of items filtered by a search query.
 pub fn filtered_items_from_query<'a, T: std::fmt::Display>(
     query: &str,
