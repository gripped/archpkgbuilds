diff --git a/tests/awre/test_generated_protocols.py b/tests/awre/test_generated_protocols.py
index 4f0d3f6e..042bf3d8 100644
--- a/tests/awre/test_generated_protocols.py
+++ b/tests/awre/test_generated_protocols.py
@@ -43,56 +43,6 @@ class TestGeneratedProtocols(AWRETestCase):
                 msg=" [ " + " ".join(p.address_hex for p in participants) + " ]",
             )
 
-    def test_without_preamble(self):
-        alice = Participant("Alice", address_hex="24")
-        broadcast = Participant("Broadcast", address_hex="ff")
-
-        mb = MessageTypeBuilder("data")
-        mb.add_label(FieldType.Function.SYNC, 16)
-        mb.add_label(FieldType.Function.LENGTH, 8)
-        mb.add_label(FieldType.Function.SRC_ADDRESS, 8)
-        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)
-
-        pg = ProtocolGenerator(
-            [mb.message_type],
-            syncs_by_mt={mb.message_type: "0x8e88"},
-            preambles_by_mt={mb.message_type: "10" * 8},
-            participants=[alice, broadcast],
-        )
-
-        for i in range(20):
-            data_bits = 16 if i % 2 == 0 else 32
-            source = pg.participants[i % 2]
-            destination = pg.participants[(i + 1) % 2]
-            pg.generate_message(
-                data="1010" * (data_bits // 4), source=source, destination=destination
-            )
-
-        # self.save_protocol("without_preamble", pg)
-        self.clear_message_types(pg.messages)
-        ff = FormatFinder(pg.messages)
-        ff.known_participant_addresses.clear()
-
-        ff.run()
-        self.assertEqual(len(ff.message_types), 1)
-
-        mt = ff.message_types[0]
-        sync = mt.get_first_label_with_type(FieldType.Function.SYNC)
-        self.assertEqual(sync.start, 0)
-        self.assertEqual(sync.length, 16)
-
-        length = mt.get_first_label_with_type(FieldType.Function.LENGTH)
-        self.assertEqual(length.start, 16)
-        self.assertEqual(length.length, 8)
-
-        dst = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)
-        self.assertEqual(dst.start, 24)
-        self.assertEqual(dst.length, 8)
-
-        seq = mt.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)
-        self.assertEqual(seq.start, 32)
-        self.assertEqual(seq.length, 8)
-
     def test_without_preamble_random_data(self):
         ff = self.get_format_finder_from_protocol_file(
             "without_ack_random_data.proto.xml"
diff --git a/tests/test_modulator.py b/tests/test_modulator.py
index c524dcc0..8b59ef91 100644
--- a/tests/test_modulator.py
+++ b/tests/test_modulator.py
@@ -65,25 +65,6 @@ class TestModulator(unittest.TestCase):
                 self.modulation_data, pa.messages[0].plain_bits, msg=modulation
             )
 
-    def test_gfsk(self):
-        target_file = os.path.join(tempfile.gettempdir(), "test.complex")
-
-        modulator = Modulator("gfsk")
-        modulator.modulation_type = "GFSK"
-        modulator.samples_per_symbol = 100
-        modulator.sample_rate = 1e6
-        modulator.parameters[1] = 20e3
-        modulator.parameters[0] = -10e3
-        data1 = modulator.modulate([True, False, False, True, False], 9437)
-        data2 = modulator.modulate([True, False, True], 9845)  # , start=len(s))
-        data3 = modulator.modulate([True, False, True, False], 8458)  # , start=len(s))
-        s = np.concatenate((data1, data2, data3))
-
-        s.tofile(target_file)
-
-        pa = ProtocolAnalyzer(Signal(target_file, "test", modulation="FSK"))
-        pa.get_protocol_from_signal()
-
     def test_performance(self):
         t = time.time()
         modulator = Modulator("Perf")
@@ -150,10 +131,3 @@ class TestModulator(unittest.TestCase):
         result = modulate_c(bits, 100, "OQPSK", parameters, 2, 1, 40e3, 0, 1e6, 1000, 0)
 
         # result.tofile("/tmp/test_oqpsk.complex")
-
-    def test_c_modulation_method_gfsk(self):
-        bits = array.array("B", [1, 0, 1, 0, 1, 1, 0, 0, 0, 1])
-        parameters = array.array("f", [-10e3, 10e3])
-        result = modulate_c(bits, 100, "GFSK", parameters, 1, 1, 40e3, 0, 1e6, 1000, 0)
-
-        # result.tofile("/tmp/test_gfsk.complex")
diff --git a/tests/test_modulator_gui.py b/tests/test_modulator_gui.py
index 3efd4513..22066fe1 100644
--- a/tests/test_modulator_gui.py
+++ b/tests/test_modulator_gui.py
@@ -105,41 +105,6 @@ class TestModulatorGUI(QtTestCase):
             ],
         )
 
-    def test_edit_modulation(self):
-        self.dialog.ui.comboBoxModulationType.setCurrentText(
-            "Amplitude Shift Keying (ASK)"
-        )
-        self.assertEqual(self.dialog.ui.labelParameters.text(), "Amplitudes in %:")
-
-        self.dialog.ui.comboBoxModulationType.setCurrentText(
-            "Frequency Shift Keying (FSK)"
-        )
-        self.assertEqual(self.dialog.ui.labelParameters.text(), "Frequencies in Hz:")
-
-        self.dialog.ui.comboBoxModulationType.setCurrentText(
-            "Gaussian Frequency Shift Keying (GFSK)"
-        )
-        self.assertEqual(self.dialog.ui.labelParameters.text(), "Frequencies in Hz:")
-        self.dialog.ui.spinBoxGaussBT.setValue(0.5)
-        self.dialog.ui.spinBoxGaussBT.editingFinished.emit()
-        self.assertEqual(self.dialog.current_modulator.gauss_bt, 0.5)
-        self.dialog.ui.spinBoxGaussFilterWidth.setValue(5)
-        self.dialog.ui.spinBoxGaussFilterWidth.editingFinished.emit()
-        self.assertEqual(self.dialog.current_modulator.gauss_filter_width, 5)
-
-        self.dialog.ui.comboBoxModulationType.setCurrentText("Phase Shift Keying (PSK)")
-        self.assertEqual(self.dialog.ui.labelParameters.text(), "Phases in degree:")
-
-        self.dialog.ui.comboBoxModulationType.setCurrentText(
-            "Amplitude Shift Keying (ASK)"
-        )
-        self.assertEqual(self.dialog.ui.labelParameters.text(), "Amplitudes in %:")
-
-        self.assertEqual(
-            int(self.dialog.ui.lSamplesInViewModulated.text()),
-            int(self.dialog.ui.gVModulated.view_rect().width()),
-        )
-
     def test_signal_view(self):
         self.add_signal_to_form("esaver.complex16s")
         signal = self.form.signal_tab_controller.signal_frames[0].signal
