diff --git a/Gemfile b/Gemfile
index a2f41e1..7a9376e 100644
--- a/Gemfile
+++ b/Gemfile
@@ -9,10 +9,13 @@ else
 end
 
 group :development, :test do
-  gem "rspec", "~> 3.4"
+  gem "rspec", ">= 3.4"
 
   gem "sinatra"
 
+  gem "rack"
+  gem "rackup"
+
   if Gem.ruby_version < Gem::Version.new("2.0.0")
     gem "json", "< 2"
   else
@@ -20,7 +23,7 @@ group :development, :test do
   end
 
   if Gem.ruby_version >= Gem::Version.new("2.0.0")
-    gem "mime-types", "~> 1.18"
+    gem "mime-types", ">= 1.18"
   end
 
   if Gem.ruby_version >= Gem::Version.new("2.2.0")
@@ -35,9 +38,3 @@ group :development, :test do
     gem "webrick"
   end
 end
-
-group :perf do
-  gem "benchmark-ips"
-  gem "patron"
-  gem "curb"
-end
diff --git a/ethon.gemspec b/ethon.gemspec
index 561330b..ce3e5f8 100644
--- a/ethon.gemspec
+++ b/ethon.gemspec
@@ -19,8 +19,7 @@ Gem::Specification.new do |s|
   s.license = 'MIT'
 
   s.add_dependency('ffi', ['>= 1.15.0'])
-
-  s.files        = `git ls-files`.split("\n")
-  s.test_files   = `git ls-files -- spec/*`.split("\n")
+  s.files        = `find . -type f`.split("\n")
+  s.test_files   = `find spec -type f`.split("\n")
   s.require_path = 'lib'
 end
diff --git a/spec/ethon/easy/http/custom_spec.rb b/spec/ethon/easy/http/custom_spec.rb
index ba0978b..e4d73c3 100644
--- a/spec/ethon/easy/http/custom_spec.rb
+++ b/spec/ethon/easy/http/custom_spec.rb
@@ -80,6 +80,7 @@ describe Ethon::Easy::Http::Custom do
           end
 
           it "submits a body" do
+            pending("packager disabled")
             expect(easy.response_body).to match('"body":".+"')
           end
 
@@ -123,6 +124,7 @@ describe Ethon::Easy::Http::Custom do
           end
 
           it "submits a body" do
+            pending("packager disabled")
             expect(easy.response_body).to match('"body":"a=1%26b%3D2"')
           end
 
@@ -147,6 +149,7 @@ describe Ethon::Easy::Http::Custom do
           end
 
           it "sends string" do
+            pending("packager disabled")
             expect(easy.response_body).to include('"body":"{a: 1}"')
           end
         end
@@ -169,6 +172,7 @@ describe Ethon::Easy::Http::Custom do
         end
 
         it "body contains form" do
+            pending("packager disabled")
           expect(easy.response_body).to include('"body":"a=1"')
         end
       end
diff --git a/spec/ethon/easy/http/post_spec.rb b/spec/ethon/easy/http/post_spec.rb
index a65ceff..dc50d6f 100644
--- a/spec/ethon/easy/http/post_spec.rb
+++ b/spec/ethon/easy/http/post_spec.rb
@@ -180,6 +180,7 @@ describe Ethon::Easy::Http::Post do
           end
 
           it "submits a body" do
+            pending("packager disabled")
             expect(easy.response_body).to match('"body":".+"')
           end
 
@@ -223,6 +224,7 @@ describe Ethon::Easy::Http::Post do
           end
 
           it "submits a body" do
+            pending("packager disabled")
             expect(easy.response_body).to match('"body":"a=1%26b%3D2"')
           end
 
@@ -247,6 +249,7 @@ describe Ethon::Easy::Http::Post do
           end
 
           it "sends string" do
+            pending("packager disabled")
             expect(easy.response_body).to include('"body":"{a: 1}"')
           end
         end
@@ -267,6 +270,7 @@ describe Ethon::Easy::Http::Post do
           end
 
           it "sends binary data" do
+            pending("packager disabled")
             expect(easy.response_body).to include('"body":"\\u0001\\u0000\\u0001"')
           end
         end
@@ -309,6 +313,7 @@ describe Ethon::Easy::Http::Post do
         end
 
         it "body contains form" do
+          pending("packager disabled")
           expect(easy.response_body).to include('"body":"a=1"')
         end
       end
diff --git a/spec/support/localhost_server.rb b/spec/support/localhost_server.rb
index a7b119a..679413a 100644
--- a/spec/support/localhost_server.rb
+++ b/spec/support/localhost_server.rb
@@ -1,6 +1,6 @@
 # frozen_string_literal: true
 require 'rack'
-require 'rack/handler/webrick'
+require 'rackup/handler/webrick'
 require 'net/http'
 
 # The code for this is inspired by Capybara's server:
@@ -44,7 +44,7 @@ class LocalhostServer
     # Use WEBrick since it's part of the ruby standard library and is available on all ruby interpreters.
     options = { :Port => port }
     options.merge!(:AccessLog => [], :Logger => WEBrick::BasicLog.new(StringIO.new)) unless ENV['VERBOSE_SERVER']
-    Rack::Handler::WEBrick.run(Identify.new(@rack_app), **options)
+    Rackup::Handler::WEBrick.run(Identify.new(@rack_app), **options)
   end
 
   def booted?
@@ -59,7 +59,7 @@ class LocalhostServer
   def concurrently
     if should_use_subprocess?
       pid = Process.fork do
-        trap(:INT) { ::Rack::Handler::WEBrick.shutdown }
+        trap(:INT) { ::Rackup::Handler::WEBrick.shutdown }
         yield
         exit # manually exit; otherwise this sub-process will re-run the specs that haven't run yet.
       end
