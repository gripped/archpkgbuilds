diff --git a/pkgs/sagemath-categories/known-test-failures.json b/pkgs/sagemath-categories/known-test-failures.json
index 23e9f1adeeb..0cc8f126940 100644
--- a/pkgs/sagemath-categories/known-test-failures.json
+++ b/pkgs/sagemath-categories/known-test-failures.json
@@ -803,10 +803,6 @@
     "sage.cpython.type": {
         "ntests": 7
     },
-    "sage.cpython.wrapperdescr": {
-        "failed": true,
-        "ntests": 0
-    },
     "sage.doctest.check_tolerance": {
         "failed": true,
         "ntests": 19
diff --git a/src/doc/en/reference/cpython/index.rst b/src/doc/en/reference/cpython/index.rst
index 5cb77b05605..fd1ea000639 100644
--- a/src/doc/en/reference/cpython/index.rst
+++ b/src/doc/en/reference/cpython/index.rst
@@ -12,7 +12,6 @@ internals.
    sage/cpython/debug
    sage/cpython/getattr
    sage/cpython/cython_metaclass
-   sage/cpython/wrapperdescr
    sage/cpython/dict_del_by_value
 
 .. include:: ../footer.txt
diff --git a/src/sage/algebras/lie_algebras/lie_algebra_element.pyx b/src/sage/algebras/lie_algebras/lie_algebra_element.pyx
index b24e931b5e8..da737b4c0b1 100644
--- a/src/sage/algebras/lie_algebras/lie_algebra_element.pyx
+++ b/src/sage/algebras/lie_algebras/lie_algebra_element.pyx
@@ -22,7 +22,6 @@ from cpython.object cimport Py_EQ, Py_NE, Py_GT, Py_GE
 from sage.misc.repr import repr_lincomb
 from sage.structure.element cimport have_same_parent, parent
 from sage.structure.coerce cimport coercion_model
-from sage.cpython.wrapperdescr cimport wrapperdescr_fastcall
 from sage.structure.element_wrapper cimport ElementWrapper
 from sage.structure.richcmp cimport richcmp, richcmp_not_equal
 from sage.data_structures.blas_dict cimport axpy, add, negate, scal
@@ -66,11 +65,28 @@ cdef class LieAlgebraElement(IndexedFreeModuleElement):
         """
         try:
             # Try the normal coercion first
-            return wrapperdescr_fastcall(IndexedFreeModuleElement.__mul__,
-                                         left, (right,), <object>NULL)
+            return IndexedFreeModuleElement.__mul__(left, right)
         except TypeError:
             pass
 
+        try:
+            # Handle the case of right multiplication by scalar
+            if isinstance(left, IndexedFreeModuleElement):
+                R = (<IndexedFreeModuleElement>left)._parent._base
+                x = R.coerce(right)
+                return IndexedFreeModuleElement.__mul__(left, x)
+        except (TypeError, KeyError):
+            pass
+
+        try:
+            # Handle the case of left multiplication by scalar
+            if isinstance(right, IndexedFreeModuleElement):
+                R = (<IndexedFreeModuleElement>right)._parent._base
+                x = R.coerce(left)
+                return IndexedFreeModuleElement.__mul__(x, right)
+        except (TypeError, KeyError):
+            pass
+
         # Lift up to the UEA and try multiplication there
         # We will eventually want to lift stuff up anyways,
         #   so just do it here.
@@ -349,11 +365,28 @@ cdef class LieAlgebraElementWrapper(ElementWrapper):
         """
         try:
             # Try the normal coercion first
-            return wrapperdescr_fastcall(ElementWrapper.__mul__,
-                                         left, (right,), <object>NULL)
+            return ElementWrapper.__mul__(left, right)
         except TypeError:
             pass
 
+        try:
+            # Handle the case of right multiplication by scalar
+            if isinstance(left, LieAlgebraElementWrapper):
+                R = (<LieAlgebraElementWrapper>left)._parent._base
+                x = R.coerce(right)
+                return ElementWrapper.__mul__(left, x)
+        except (TypeError, KeyError):
+            pass
+
+        try:
+            # Handle the case of left multiplication by scalar
+            if isinstance(right, LieAlgebraElementWrapper):
+                R = (<LieAlgebraElementWrapper>right)._parent._base
+                x = R.coerce(left)
+                return ElementWrapper.__mul__(x, right)
+        except (TypeError, KeyError):
+            pass
+
         # Lift up to the UEA and try multiplication there
         # We will eventually want to lift stuff up anyways,
         #   so just do it here.
diff --git a/src/sage/combinat/sloane_functions.py b/src/sage/combinat/sloane_functions.py
index 12580cbb8ca..f0c61af69cb 100644
--- a/src/sage/combinat/sloane_functions.py
+++ b/src/sage/combinat/sloane_functions.py
@@ -8911,7 +8911,7 @@ class Sloane(SageObject):
         ::
 
             sage: sloane.__repr__
-            <built-in method __repr__ of Sloane object at 0x...>
+            <...__repr__...of Sloane object at 0x...>
             sage: sloane.__name__
             Traceback (most recent call last):
             ...
diff --git a/src/sage/cpython/meson.build b/src/sage/cpython/meson.build
index fdd99770782..0667e05ebad 100644
--- a/src/sage/cpython/meson.build
+++ b/src/sage/cpython/meson.build
@@ -28,7 +28,6 @@ extension_data = {
   'getattr' : files('getattr.pyx'),
   'string' : files('string.pyx'),
   'type' : files('type.pyx'),
-  'wrapperdescr' : files('wrapperdescr.pyx'),
 }
 
 foreach name, pyx : extension_data
diff --git a/src/sage/cpython/wrapperdescr.pyx b/src/sage/cpython/wrapperdescr.pyx
deleted file mode 100644
index b1b1e67cc79..00000000000
--- a/src/sage/cpython/wrapperdescr.pyx
+++ /dev/null
@@ -1,104 +0,0 @@
-# sage_setup: distribution = sagemath-objects
-"""
-Slot wrappers
-
-A slot wrapper is installed in the dict of an extension type to
-access a special method implemented in C. For example,
-``object.__init__`` or ``Integer.__lt__``. Note that slot wrappers
-are always unbound (there is a bound variant called method-wrapper).
-
-EXAMPLES::
-
-    sage: int.__add__
-    <slot wrapper '__add__' of 'int' objects>
-
-Pure Python classes have normal methods, not slot wrappers::
-
-    sage: class X():
-    ....:     def __add__(self, other):
-    ....:         return NotImplemented
-    sage: X.__add__
-    <function X.__add__ at ...>
-"""
-
-# ****************************************************************************
-#       Copyright (C) 2017 Jeroen Demeyer <J.Demeyer@UGent.be>
-#
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#                  https://www.gnu.org/licenses/
-# ****************************************************************************
-
-from sage.cpython.string import bytes_to_str
-
-
-def wrapperdescr_call(slotwrapper, self, *args, **kwds):
-    """
-    Call a slot wrapper without any type checks.
-
-    The main reason to use this is to call arithmetic slots like
-    ``__mul__`` without having to worry about whether to call
-    ``T.__mul__(a, b)`` or ``T.__rmul__(b, a)``.
-
-    INPUT:
-
-    - ``slotwrapper`` -- a slot wrapper (for example ``int.__add__``)
-
-    - ``self`` -- the first positional argument. Normally, this should
-      be of the correct type (an ``int`` when calling ``int.__add__``).
-      However, this check is skipped: you can pass an arbitrary object.
-
-    - ``*args``, ``**kwds`` -- further arguments
-
-    .. WARNING::
-
-        Since this skips type checks, it can easily crash Python if
-        used incorrectly.
-
-    EXAMPLES::
-
-        sage: from sage.cpython.wrapperdescr import wrapperdescr_call
-        sage: wrapperdescr_call(Integer.__mul__, 6, 9)
-        54
-        sage: wrapperdescr_call(Integer.__mul__, 7/5, 9)
-        63/5
-        sage: from sage.structure.element import Element
-        sage: wrapperdescr_call(Element.__mul__, 6, 9)
-        54
-        sage: wrapperdescr_call(Element.__mul__, 7/5, 9)
-        63/5
-        sage: from sage.numerical.mip import MixedIntegerLinearProgram                  # needs sage.numerical.mip
-        sage: wrapperdescr_call(type.__call__,                                          # needs sage.numerical.mip
-        ....:                   MixedIntegerLinearProgram, maximization=False)
-        Mixed Integer Program (no objective, 0 variables, 0 constraints)
-
-    TESTS::
-
-        sage: wrapperdescr_call(Integer.__mul__, 1, 2, 3)
-        Traceback (most recent call last):
-        ...
-        TypeError: expected 1 arg..., got 2
-        sage: wrapperdescr_call(Integer.__mul__, 6, other=9)
-        Traceback (most recent call last):
-        ...
-        TypeError: wrapper __mul__ slotdef doesn't take keyword arguments
-    """
-    return wrapperdescr_fastcall(slotwrapper, self, args, kwds)
-
-
-cdef wrapperdescr_fastcall(wrapper_descriptor slotwrapper, self, args, kwds):
-    # Cython implementation of wrapperdescr_call
-    cdef wrapperbase* slotdef = slotwrapper.d_base
-
-    cdef wrapperfunc_kwds wk
-    if slotdef.flags & PyWrapperFlag_KEYWORDS:
-        wk = <wrapperfunc_kwds>(slotdef.wrapper)
-        return wk(self, args, slotwrapper.d_wrapped, kwds)
-
-    if <PyObject*>kwds is not NULL and kwds:
-        raise TypeError(f"wrapper {bytes_to_str(slotdef.name)} slotdef "
-                        "doesn't take keyword arguments")
-
-    return slotdef.wrapper(self, args, slotwrapper.d_wrapped)
diff --git a/src/sage/graphs/base/static_sparse_backend.pyx b/src/sage/graphs/base/static_sparse_backend.pyx
index 142686460e0..860cbbe2852 100644
--- a/src/sage/graphs/base/static_sparse_backend.pyx
+++ b/src/sage/graphs/base/static_sparse_backend.pyx
@@ -35,6 +35,7 @@ Classes and methods
 -------------------
 """
 
+cimport cython
 from cysignals.memory cimport check_calloc, sig_free
 
 from sage.graphs.base.static_sparse_graph cimport (init_short_digraph,
@@ -1545,6 +1546,7 @@ cdef class StaticSparseBackend(CGraphBackend):
         (<StaticSparseCGraph> self._cg).del_vertex(v)
 
 
+@cython.binding(True)
 def _run_it_on_static_instead(f):
     r"""
     A decorator function to force the (Di)Graph functions to compute from a
diff --git a/src/sage/graphs/strongly_regular_db.pyx b/src/sage/graphs/strongly_regular_db.pyx
index 6a61dc76c5a..a0946112787 100644
--- a/src/sage/graphs/strongly_regular_db.pyx
+++ b/src/sage/graphs/strongly_regular_db.pyx
@@ -957,7 +957,7 @@ def is_complete_multipartite(int v, int k, int l, int mu):
 
         sage: from sage.graphs.strongly_regular_db import is_complete_multipartite
         sage: t = is_complete_multipartite(12,8,4,8); t
-        (<cyfunction is_complete_multipartite.<locals>.CompleteMultipartiteSRG at ...>,
+        (<...CompleteMultipartiteSRG...>,
          3,
          4)
         sage: g = t[0](*t[1:]); g
@@ -1492,7 +1492,7 @@ def is_twograph_descendant_of_srg(int v, int k0, int l, int mu):
 
         sage: from sage.graphs.strongly_regular_db import is_twograph_descendant_of_srg
         sage: t = is_twograph_descendant_of_srg(27, 10, 1, 5); t                        # needs sage.rings.finite_rings
-        (<cyfunction is_twograph_descendant_of_srg.<locals>.la at...
+        (<...is_twograph_descendant_of_srg...>, (8,))
         sage: g = t[0](*t[1:]); g                                                       # needs sage.rings.finite_rings
         descendant of complement(Johnson graph with parameters 8,2) at {0, 1}: Graph on 27 vertices
         sage: g.is_strongly_regular(parameters=True)                                    # needs sage.rings.finite_rings
@@ -1662,9 +1662,9 @@ def is_switch_OA_srg(int v, int k, int l, int mu):
         sage: t[0](*t[1:]).is_strongly_regular(parameters=True)                         # needs sage.schemes
         (290, 136, 63, 64)
         sage: is_switch_OA_srg(626, 300, 143, 144)                                      # needs sage.schemes
-        (<cyfunction is_switch_OA_srg.<locals>.switch_OA_srg at ..., 12, 25)
+        (<...switch_OA_srg..., 12, 25)
         sage: is_switch_OA_srg(842, 406, 195, 196)                                      # needs sage.schemes
-        (<cyfunction is_switch_OA_srg.<locals>.switch_OA_srg at ..., 14, 29)
+        (<...switch_OA_srg..., 14, 29)
     """
     cdef int n_2_p_1 = v
     cdef int n = <int> floor(sqrt(n_2_p_1 - 1))
@@ -2920,21 +2920,21 @@ def strongly_regular_graph_lazy(int v, int k, int l, int mu=-1, bint existence=F
 
         sage: from sage.graphs.strongly_regular_db import strongly_regular_graph_lazy
         sage: g,p=strongly_regular_graph_lazy(10,6,3); g,p
-        (<cyfunction is_johnson.<locals>.<lambda> at ...>, 5)
+        (<...is_johnson...>, 5)
         sage: g(p)
         Johnson graph with parameters 5,2: Graph on 10 vertices
         sage: g,p=strongly_regular_graph_lazy(10,3,0,1); g,p
-        (<cyfunction strongly_regular_graph_lazy.<locals>.<lambda> at...>,
+        (<...strongly_regular_graph_lazy...>,
          (5,))
         sage: g(p)
         complement(Johnson graph with parameters 5,2): Graph on 10 vertices
         sage: g,p=strongly_regular_graph_lazy(12,3,2); g,p
-        (<cyfunction strongly_regular_graph_lazy.<locals>.<lambda> at...>,
+        (<...strongly_regular_graph_lazy...>,
          (3, 4))
         sage: g(p)
         complement(Multipartite Graph with set sizes [4, 4, 4]): Graph on 12 vertices
         sage: g = strongly_regular_graph_lazy(539,250,105); g                           # needs sage.combinat sage.modules
-        (<cyfunction is_twograph_descendant_of_srg.<locals>.la at...>,
+        (<...is_twograph_descendant_of_srg...>,
          5,
          11)
         sage: g[0](*g[1:])                                                              # needs sage.combinat sage.modules
diff --git a/src/sage/misc/c3_controlled.pyx b/src/sage/misc/c3_controlled.pyx
index 765e83fbec2..f6425079414 100644
--- a/src/sage/misc/c3_controlled.pyx
+++ b/src/sage/misc/c3_controlled.pyx
@@ -1121,7 +1121,7 @@ class HierarchyElement(object, metaclass=ClasscallMetaclass):
         to reconstruct an element of the hierarchy from its value::
 
             sage: x._from_value                                                         # needs sage.graphs
-            Cached version of <cyfunction HierarchyElement.__classcall__.<locals>.f at ...>
+            Cached version of <...__classcall__...>
             sage: x._from_value(x.value) is x                                           # needs sage.graphs
             True
         """
diff --git a/src/sage/rings/polynomial/polynomial_element.pyx b/src/sage/rings/polynomial/polynomial_element.pyx
index a1ac4d302b8..22b03137f9c 100644
--- a/src/sage/rings/polynomial/polynomial_element.pyx
+++ b/src/sage/rings/polynomial/polynomial_element.pyx
@@ -66,7 +66,6 @@ import copy
 import re
 from io import StringIO
 
-from sage.cpython.wrapperdescr cimport wrapperdescr_fastcall
 import sage.rings.rational
 import sage.rings.integer
 import sage.rings.integer_ring
@@ -2837,11 +2836,25 @@ cdef class Polynomial(CommutativePolynomial):
             except TypeError:
                 pass
 
-        # Delegate to coercion model. The line below is basically
-        # RingElement.__truediv__(left, right), except that it also
-        # works if left is not of type RingElement.
-        return wrapperdescr_fastcall(RingElement.__truediv__,
-                left, (right,), <object>NULL)
+        # Try to coerce denominator in numerator parent...
+        if isinstance(right, Polynomial):
+            R = (<Polynomial>right)._parent
+            try:
+                x = R.coerce(left)
+                return x.__truediv__(right)
+            except TypeError:
+                pass
+
+        # ...and numerator in denominator parent
+        if isinstance(left, Polynomial):
+            R = (<Polynomial>left)._parent
+            try:
+                x = R.coerce(right)
+                return left.__truediv__(x)
+            except TypeError:
+                pass
+
+        return NotImplemented
 
     def __pow__(left, right, modulus):
         """
diff --git a/src/sage/rings/ring_extension.pyx b/src/sage/rings/ring_extension.pyx
index 96449d10537..9d7e83d3167 100644
--- a/src/sage/rings/ring_extension.pyx
+++ b/src/sage/rings/ring_extension.pyx
@@ -110,6 +110,7 @@ AUTHOR:
 # ***************************************************************************
 
 
+cimport cython
 from sage.misc.fast_methods cimport hash_by_id
 from sage.misc.cachefunc import cached_method
 from sage.cpython.getattr cimport AttributeErrorMessage
@@ -612,6 +613,7 @@ cdef class RingExtension_generic(Parent):
         self.register_coercion(RingExtensionBackendIsomorphism(ring.Hom(self)))
         ring.register_conversion(RingExtensionBackendReverseIsomorphism(self.Hom(ring)))
 
+    @cython.binding(True)
     def __getattr__(self, name):
         """
         If this extension was created with ``import_methods = True``,
diff --git a/src/sage/rings/ring_extension_element.pyx b/src/sage/rings/ring_extension_element.pyx
index 39916ab26f8..4836ff6442b 100644
--- a/src/sage/rings/ring_extension_element.pyx
+++ b/src/sage/rings/ring_extension_element.pyx
@@ -17,6 +17,7 @@ AUTHOR:
 # ***************************************************************************
 
 
+cimport cython
 from sage.ext.stdsage cimport PY_NEW
 from sage.cpython.getattr cimport AttributeErrorMessage
 from sage.cpython.getattr import dir_with_other_class
@@ -96,6 +97,7 @@ cdef class RingExtensionElement(CommutativeAlgebraElement):
         """
         return self._parent, (self._backend,)
 
+    @cython.binding(True)
     def __getattr__(self, name):
         """
         If the parent of this element was created with ``import_methods = True``,
diff --git a/src/sage/structure/richcmp.pxd b/src/sage/structure/richcmp.pxd
index 1ff9c16dee0..4d369d44e70 100644
--- a/src/sage/structure/richcmp.pxd
+++ b/src/sage/structure/richcmp.pxd
@@ -1,3 +1,4 @@
+# cython: binding=True
 # sage_setup: distribution = sagemath-objects
 from libc.stdint cimport uint32_t
 from cpython.object cimport (Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE,
diff --git a/src/sage/structure/richcmp.pyx b/src/sage/structure/richcmp.pyx
index d3e8cb3e41d..5471427dab7 100644
--- a/src/sage/structure/richcmp.pyx
+++ b/src/sage/structure/richcmp.pyx
@@ -1,3 +1,4 @@
+# cython: binding=True
 # sage_setup: distribution = sagemath-objects
 r"""
 Cython-like rich comparisons in Python
