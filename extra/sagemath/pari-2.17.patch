diff --git a/src/sage/libs/pari/convert_sage.pyx b/src/sage/libs/pari/convert_sage.pyx
index 64386bcf632..db6725f39a5 100644
--- a/src/sage/libs/pari/convert_sage.pyx
+++ b/src/sage/libs/pari/convert_sage.pyx
@@ -573,17 +573,16 @@ cpdef list pari_prime_range(long c_start, long c_stop, bint py_ints=False):
         sage: pari_prime_range(2, 19)
         [2, 3, 5, 7, 11, 13, 17]
     """
-    cdef long p = 0
-    cdef byteptr pari_prime_ptr = diffptr
+    cdef ulong i = 1
     res = []
-    while p < c_start:
-        NEXT_PRIME_VIADIFF(p, pari_prime_ptr)
-    while p < c_stop:
+    while pari_PRIMES[i] < c_start:
+        i+=1
+    while pari_PRIMES[i] < c_stop:
         if py_ints:
-            res.append(p)
+            res.append(pari_PRIMES[i])
         else:
             z = <Integer>PY_NEW(Integer)
-            mpz_set_ui(z.value, p)
+            mpz_set_ui(z.value, pari_PRIMES[i])
             res.append(z)
-        NEXT_PRIME_VIADIFF(p, pari_prime_ptr)
+        i+=1
     return res
diff --git a/src/sage/libs/pari/convert_sage_real_mpfr.pyx b/src/sage/libs/pari/convert_sage_real_mpfr.pyx
index 98db6023dc9..5fd7fba1c47 100644
--- a/src/sage/libs/pari/convert_sage_real_mpfr.pyx
+++ b/src/sage/libs/pari/convert_sage_real_mpfr.pyx
@@ -28,7 +28,7 @@ cpdef Gen new_gen_from_real_mpfr_element(RealNumber self):
 
     # We round up the precision to the nearest multiple of wordsize.
     cdef int rounded_prec
-    rounded_prec = (self.prec() + wordsize - 1) & ~(wordsize - 1)
+    rounded_prec = nbits2prec(self.prec())
 
     # Yes, assigning to self works fine, even in Cython.
     if rounded_prec > prec:
@@ -48,7 +48,7 @@ cpdef Gen new_gen_from_real_mpfr_element(RealNumber self):
         exponent = mpfr_get_z_exp(mantissa, self.value)
 
         # Create a PARI REAL
-        pari_float = cgetr(2 + rounded_prec / wordsize)
+        pari_float = cgetr(rounded_prec)
         pari_float[1] = evalexpo(exponent + rounded_prec - 1) + evalsigne(mpfr_sgn(self.value))
         mpz_export(&pari_float[2], NULL, 1, wordsize // 8, 0, 0, mantissa)
         mpz_clear(mantissa)
