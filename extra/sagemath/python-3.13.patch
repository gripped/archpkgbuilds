diff --git a/src/sage/interfaces/singular.py b/src/sage/interfaces/singular.py
index d02ae43149f..447b548c1b8 100644
--- a/src/sage/interfaces/singular.py
+++ b/src/sage/interfaces/singular.py
@@ -1401,7 +1401,7 @@ class SingularElement(ExtraTabCompletion, ExpectElement, sage.interfaces.abc.Sin
             # this is our cue that singular uses `rp` instead of `ip`
             if singular_name_mapping['invlex'] == 'rp' and 'doctest' in str(get_display_manager()):
                 s = re.sub('^(// .*block.* : ordering )rp$', '\\1ip',
-                           s, 0, re.MULTILINE)
+                           s, flags=re.MULTILINE)
         return s
 
     def __copy__(self):
diff --git a/src/sage/misc/cython.py b/src/sage/misc/cython.py
index c542e0d1919..241078d5f2c 100644
--- a/src/sage/misc/cython.py
+++ b/src/sage/misc/cython.py
@@ -380,7 +380,7 @@ def cython(filename, verbose=0, compile_message=False,
         cython_messages = re.sub(
             "^.*The keyword 'nogil' should appear at the end of the function signature line. "
             "Placing it before 'except' or 'noexcept' will be disallowed in a future version of Cython.\n",
-            "", cython_messages, 0, re.MULTILINE)
+            "", cython_messages, flags=re.MULTILINE)
 
         sys.stderr.write(cython_messages)
         sys.stderr.flush()
diff --git a/src/sage/rings/ring_extension_morphism.pyx b/src/sage/rings/ring_extension_morphism.pyx
index d4aad7f8253..7294e90c319 100644
--- a/src/sage/rings/ring_extension_morphism.pyx
+++ b/src/sage/rings/ring_extension_morphism.pyx
@@ -461,7 +461,7 @@ cdef class RingExtensionHomomorphism(RingMap):
         if self.base_map() is not None:
             s += "with map on base ring"
             ss = self.base_map()._repr_defn()
-            ss = re.sub('\nwith map on base ring:?$', '', ss, 0, re.MULTILINE)
+            ss = re.sub('\nwith map on base ring:?$', '', ss, flags=re.MULTILINE)
             if ss != "": s += ":\n" + ss
         if s != "" and s[-1] == "\n":
             s = s[:-1]
diff --git a/src/sage/doctest/forker.py b/src/sage/doctest/forker.py
index bf6d49906de..a52485d3d91 100644
--- a/src/sage/doctest/forker.py
+++ b/src/sage/doctest/forker.py
@@ -553,6 +553,8 @@ class SageDocTestRunner(doctest.DocTestRunner):
         self.total_walltime_skips = 0
         self.total_performed_tests = 0
         self.total_walltime = 0
+        if sys.version_info.minor < 13:
+            self._stats = self._name2ft
 
     def _run(self, test, compileflags, out):
         """
@@ -830,7 +832,10 @@ class SageDocTestRunner(doctest.DocTestRunner):
         self.optionflags = original_optionflags
 
         # Record and return the number of failures and tries.
-        self._DocTestRunner__record_outcome(test, failures, tries)
+        if sys.version_info.minor < 13:
+            self._DocTestRunner__record_outcome(test, failures, tries)
+        else:
+            self._DocTestRunner__record_outcome(test, failures, tries, walltime_skips)
         self.total_walltime_skips += walltime_skips
         self.total_performed_tests += tries
         return TestResults(failures, tries)
@@ -931,7 +936,7 @@ class SageDocTestRunner(doctest.DocTestRunner):
             sage: from sage.doctest.control import DocTestDefaults; DD = DocTestDefaults()
             sage: import doctest, sys, os
             sage: DTR = SageDocTestRunner(SageOutputChecker(), verbose=False, sage_options=DD, optionflags=doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS)
-            sage: DTR._name2ft['sage.doctest.forker'] = (1,120)
+            sage: DTR._stats['sage.doctest.forker'] = (1,120)
             sage: results = DTR.summarize()
             **********************************************************************
             1 item had failures:
@@ -946,8 +951,8 @@ class SageDocTestRunner(doctest.DocTestRunner):
         passed = []
         failed = []
         totalt = totalf = 0
-        for x in self._name2ft.items():
-            name, (f, t) = x
+        for x in self._stats.items():
+            name, (f, t, *_) = x
             assert f <= t
             totalt += t
             totalf += f
@@ -972,10 +977,10 @@ class SageDocTestRunner(doctest.DocTestRunner):
             print(self.DIVIDER, file=m)
             print(count_noun(len(failed), "item"), "had failures:", file=m)
             failed.sort()
-            for thing, (f, t) in failed:
+            for thing, (f, t, *_) in failed:
                 print(" %3d of %3d in %s" % (f, t, thing), file=m)
         if verbose:
-            print(count_noun(totalt, "test") + " in " + count_noun(len(self._name2ft), "item") + ".", file=m)
+            print(count_noun(totalt, "test") + " in " + count_noun(len(self._stats), "item") + ".", file=m)
             print("%s passed and %s failed." % (totalt - totalf, totalf), file=m)
             if totalf:
                 print("***Test Failed***", file=m)
diff --git a/src/sage/misc/replace_dot_all.py b/src/sage/misc/replace_dot_all.py
index ea51a9b3159..a196810bd44 100644
--- a/src/sage/misc/replace_dot_all.py
+++ b/src/sage/misc/replace_dot_all.py
@@ -194,14 +194,15 @@ def find_replacements(location, package_regex=None, verbose=False):
                     to_exec = to_exec.replace("'", '').replace('"', '')
                     if (to_exec[-1] == ','):
                         to_exec = to_exec[:-1]
-                    exec(to_exec)
+                    glob = globals()
+                    exec(to_exec, glob)
                 except ModuleNotFoundError as err:
                     print(f'ModuleNotFoundError: {err} found when trying to execute {to_exec}')
                 except ImportError as err:
                     print(f'ImportError: {err} found when trying to execute {to_exec}')
 
                 try:  # try to evaluate the list of module names to get a list of the modules themselves which we can call import_statements on
-                    modules = eval(to_eval)
+                    modules = eval(to_eval, glob)
                 except NameError as err:
                     print(f'NameError: {err} found when trying to evaluate {to_eval} at {location}:{row_index + 1}')
                 except SyntaxError as err:
diff --git a/src/sage/matroids/extension.pyx b/src/sage/matroids/extension.pyx
index 778e6d6ef70..83b792e8d2b 100644
--- a/src/sage/matroids/extension.pyx
+++ b/src/sage/matroids/extension.pyx
@@ -211,6 +211,9 @@ cdef class LinearSubclassesIter:
 
         self._nodes = [first_cut]
 
+    def __iter__(self):
+        return self
+
     def __next__(self):
         """
         Return the next linear subclass.
diff --git a/src/sage/matroids/set_system.pyx b/src/sage/matroids/set_system.pyx
index d9a2f631fbf..0bf9cb2b7fa 100644
--- a/src/sage/matroids/set_system.pyx
+++ b/src/sage/matroids/set_system.pyx
@@ -772,6 +772,9 @@ cdef class SetSystemIterator:
         self._pointer = -1
         self._len = len(H)
 
+    def __iter__(self):
+        return self
+
     def __next__(self):
         """
         Return the next subset of a SetSystem.
diff --git a/src/doc/de/tutorial/tour_linalg.rst b/src/doc/de/tutorial/tour_linalg.rst
index 1be6540c89e..abd47d2c488 100644
--- a/src/doc/de/tutorial/tour_linalg.rst
+++ b/src/doc/de/tutorial/tour_linalg.rst
@@ -245,4 +245,4 @@ Beachten Sie, dass Python zwischen Klein- und Großschreibung unterscheidet:
     sage: M = MatrixSpace(QQ, 10,10, Sparse=True)
     Traceback (most recent call last):
     ...
-    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'
+    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'...
diff --git a/src/doc/en/tutorial/tour_linalg.rst b/src/doc/en/tutorial/tour_linalg.rst
index 84a45f4931b..d1dde6a485e 100644
--- a/src/doc/en/tutorial/tour_linalg.rst
+++ b/src/doc/en/tutorial/tour_linalg.rst
@@ -239,4 +239,4 @@ Note that Python is case sensitive:
     sage: M = MatrixSpace(QQ, 10,10, Sparse=True)
     Traceback (most recent call last):
     ...
-    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'
+    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'...
diff --git a/src/doc/fr/tutorial/tour_linalg.rst b/src/doc/fr/tutorial/tour_linalg.rst
index 582a915edef..0dcdf044453 100644
--- a/src/doc/fr/tutorial/tour_linalg.rst
+++ b/src/doc/fr/tutorial/tour_linalg.rst
@@ -241,4 +241,4 @@ Notez que Python distingue les majuscules des minuscules :
     sage: M = MatrixSpace(QQ, 10,10, Sparse=True)
     Traceback (most recent call last):
     ...
-    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'
+    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'...
diff --git a/src/doc/ja/tutorial/tour_linalg.rst b/src/doc/ja/tutorial/tour_linalg.rst
index 227f879136e..263c5d7943a 100644
--- a/src/doc/ja/tutorial/tour_linalg.rst
+++ b/src/doc/ja/tutorial/tour_linalg.rst
@@ -252,4 +252,4 @@ Pythonでは，大文字小文字が区別されることに注意:
     sage: M = MatrixSpace(QQ, 10,10, Sparse=True)
     Traceback (most recent call last):
     ...
-    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'
+    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'...
diff --git a/src/doc/pt/tutorial/tour_linalg.rst b/src/doc/pt/tutorial/tour_linalg.rst
index 806a36c6446..79eb3ac7a9c 100644
--- a/src/doc/pt/tutorial/tour_linalg.rst
+++ b/src/doc/pt/tutorial/tour_linalg.rst
@@ -220,4 +220,4 @@ Note que o Python é sensível a maiúsculas e minúsculas:
     sage: M = MatrixSpace(QQ, 10,10, Sparse=True)
     Traceback (most recent call last):
     ...
-    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'
+    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'...
diff --git a/src/doc/ru/tutorial/tour_linalg.rst b/src/doc/ru/tutorial/tour_linalg.rst
index bf2a1084544..6ed95084d90 100644
--- a/src/doc/ru/tutorial/tour_linalg.rst
+++ b/src/doc/ru/tutorial/tour_linalg.rst
@@ -214,4 +214,4 @@ Sage поддерживает разреженную линейную алгеб
     sage: M = MatrixSpace(QQ, 10,10, Sparse=True)
     Traceback (most recent call last):
     ...
-    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'
+    TypeError: ...__init__() got an unexpected keyword argument 'Sparse'...
diff --git a/src/sage/categories/map.pyx b/src/sage/categories/map.pyx
index 43e476847d0..0007555326a 100644
--- a/src/sage/categories/map.pyx
+++ b/src/sage/categories/map.pyx
@@ -275,7 +275,7 @@ cdef class Map(Element):
         maps::
 
             sage: phi.domain                                                            # needs sage.rings.number_field
-            <weakref at ...; to 'NumberField_quadratic_with_category' at ...>
+            <weakref at ...; to '...NumberField_quadratic_with_category' at ...>
             sage: phi._make_strong_references()                                         # needs sage.rings.number_field
             sage: print(phi.domain)                                                     # needs sage.rings.number_field
             The constant function (...) -> Number Field in a
@@ -343,7 +343,7 @@ cdef class Map(Element):
         maps::
 
             sage: phi.domain                                                            # needs sage.rings.number_field
-            <weakref at ...; to 'NumberField_quadratic_with_category' at ...>
+            <weakref at ...; to '...NumberField_quadratic_with_category' at ...>
             sage: phi._make_strong_references()                                         # needs sage.rings.number_field
             sage: print(phi.domain)                                                     # needs sage.rings.number_field
             The constant function (...) -> Number Field in a
diff --git a/src/sage/misc/bindable_class.py b/src/sage/misc/bindable_class.py
index 743b5a19da6..c23ba0c2c43 100644
--- a/src/sage/misc/bindable_class.py
+++ b/src/sage/misc/bindable_class.py
@@ -113,7 +113,7 @@ class BindableClass(metaclass=ClasscallMetaclass):
         Still, documentation works as usual::
 
             sage: outer.Inner.__doc__
-            ' some documentation '
+            '...some documentation '
 
     TESTS::
 
diff --git a/src/sage/misc/sagedoc.py b/src/sage/misc/sagedoc.py
index 0505f6039a9..539d90c0f0e 100644
--- a/src/sage/misc/sagedoc.py
+++ b/src/sage/misc/sagedoc.py
@@ -694,7 +694,7 @@ def format(s, embedded=False):
     We check that the todo Sphinx extension is correctly activated::
 
         sage: sage.misc.sagedoc.format(sage.combinat.ranker.on_fly.__doc__)             # needs sphinx
-        "   Return ...  Todo: add tests as in combinat::rankers\n"
+        "...Return ...Todo: add tests as in combinat::rankers\n"
 
     In the following use case, the ``nodetex`` directive would have been ignored prior
     to :issue:`11815`::
@@ -1135,10 +1135,11 @@ def search_src(string, extra1='', extra2='', extra3='', extra4='',
     The following produces an error because the string 'fetch(' is a
     malformed regular expression::
 
-        sage: print(search_src(" fetch(", "def", interact=False))
-        Traceback (most recent call last):
-        ...
-        error: missing ), unterminated subpattern at position 6
+        sage: try:
+        ....:     print(search_src(" fetch(", "def", interact=False))
+        ....: except Exception as e:
+        ....:     print(e)
+        missing ), unterminated subpattern at position 6
 
     To fix this, *escape* the parenthesis with a backslash::
 
@@ -1456,7 +1457,7 @@ class _sage_doc:
         sage: browse_sage_doc._open("reference", testing=True)[0]                       # needs sagemath_doc_html
         'http://localhost:8000/doc/live/reference/index.html'
         sage: browse_sage_doc(identity_matrix, 'rst')[-107:-47]                         # needs sage.modules
-        'Full MatrixSpace of 3 by 3 sparse matrices over Integer Ring'
+        '...Full MatrixSpace of 3 by 3 sparse matrices...'
     """
     def __init__(self):
         """
diff --git a/src/sage/misc/sageinspect.py b/src/sage/misc/sageinspect.py
index 585112b5061..12f319fc8e3 100644
--- a/src/sage/misc/sageinspect.py
+++ b/src/sage/misc/sageinspect.py
@@ -1986,7 +1986,7 @@ def sage_getdoc(obj, obj_name='', embedded=False):
 
         sage: from sage.misc.sageinspect import sage_getdoc
         sage: sage_getdoc(identity_matrix)[87:124]                                      # needs sage.modules
-        'Return the n x n identity matrix over'
+        '...the n x n identity matrix...'
         sage: def f(a, b, c, d=1): return a+b+c+d
         ...
         sage: import functools
diff --git a/src/sage/modular/modsym/modsym.py b/src/sage/modular/modsym/modsym.py
index fb46d0edafa..ed7c9285169 100644
--- a/src/sage/modular/modsym/modsym.py
+++ b/src/sage/modular/modsym/modsym.py
@@ -369,7 +369,7 @@ def ModularSymbols(group=1,
         {}
         sage: M = ModularSymbols(11,use_cache=True)
         sage: sage.modular.modsym.modsym._cache
-        {(Congruence Subgroup Gamma0(11), 2, 0, Rational Field): <weakref at ...; to 'ModularSymbolsAmbient_wt2_g0_with_category' at ...>}
+        {(Congruence Subgroup Gamma0(11), 2, 0, Rational Field): <weakref at ...; to '...ModularSymbolsAmbient_wt2_g0_with_category' at ...>}
         sage: M is ModularSymbols(11,use_cache=True)
         True
         sage: M is ModularSymbols(11,use_cache=False)
diff --git a/src/sage/repl/attach.py b/src/sage/repl/attach.py
index b3e20fe61d8..b9997d8f2df 100644
--- a/src/sage/repl/attach.py
+++ b/src/sage/repl/attach.py
@@ -40,7 +40,7 @@ character-by-character::
     ....:     traceback.print_exc(file=sys.stdout)
     Traceback (most recent call last):
     ...
-        exec(preparse_file(f.read()) + "\n", globals)
+        exec(preparse_file(f.read()) + "\n", globals)...
       File "<string>", line 3, in <module>
     ValueError: third
     sage: detach(src)
@@ -52,7 +52,7 @@ character-by-character::
     ....:     traceback.print_exc(file=sys.stdout)
     Traceback (most recent call last):
     ...
-        exec(code, globals)
+        exec(code, globals)...
       File ".../foobar...sage.py", line ..., in <module>
         raise ValueError("third")   # this should appear in the source snippet...
     ValueError: third
diff --git a/src/sage/repl/rich_output/pretty_print.py b/src/sage/repl/rich_output/pretty_print.py
index 93833e01cd8..8e00e3d70e4 100644
--- a/src/sage/repl/rich_output/pretty_print.py
+++ b/src/sage/repl/rich_output/pretty_print.py
@@ -160,7 +160,7 @@ class SequencePrettyPrinter(SageObject):
             sage: seq._concatenate_graphs().show(edge_labels=True)                      # needs sage.graphs sage.plot
             Traceback (most recent call last):
             ...
-            TypeError: ...matplotlib() got an unexpected keyword argument 'edge_labels'
+            TypeError: ...matplotlib() got an unexpected keyword argument 'edge_labels'...
         """
         try:
             from sage.plot.plot import Graphics
diff --git a/src/sage/misc/latex_macros.py b/src/sage/misc/latex_macros.py
index fc389b32a72..1cce2fa6f14 100644
--- a/src/sage/misc/latex_macros.py
+++ b/src/sage/misc/latex_macros.py
@@ -43,6 +43,8 @@
 contain '\newcommand' lines for each of the entries in ``macros``.
 """
 
+import importlib
+
 
 def produce_latex_macro(name, *sample_args):
     r"""
@@ -69,7 +71,7 @@ def produce_latex_macro(name, *sample_args):
          sage: produce_latex_macro('GF', 37)
          '\\newcommand{\\GF}[1]{\\Bold{F}_{#1}}'
 
-    If the Sage object is not in the global name space, describe it
+    If the Sage object is not in the global namespace, describe it
     like so::
 
          sage: produce_latex_macro('sage.rings.finite_rings.finite_field_constructor.FiniteField', 3)
@@ -84,22 +86,16 @@ def produce_latex_macro(name, *sample_args):
     else:
         module, real_name = names_split
     newcommand = '\\newcommand{\\' + real_name + '}'
-    count = 0
-    args = "("
-    for x in sample_args:
-        count += 1
-        args += str(x) + ','
-    args += ')'
-    exec('from ' + module + ' import ' + real_name)
-    if count:
-        defn = '[' + str(count) + ']{'
-        defn += eval('str(LatexCall()(' + real_name + args + '))') + '}'
+    sage_object = getattr(importlib.import_module(module), real_name)
+    if sample_args:
+        defn = '[' + str(len(sample_args)) + ']{'
+        defn += str(LatexCall()(sage_object(*sample_args))) + '}'
     else:
-        defn = '{' + eval('str(LatexCall()(' + real_name + '))') + '}'
-    count = 0
-    for x in sample_args:
-        count += 1
-        defn = defn.replace(str(x), "#" + str(count))
+        defn = '{' + str(LatexCall()(sage_object)) + '}'
+    for i, x in enumerate(sample_args):
+        s = str(x)
+        assert s in defn
+        defn = defn.replace(s, "#" + str(i+1))
     return newcommand + defn
 
 
