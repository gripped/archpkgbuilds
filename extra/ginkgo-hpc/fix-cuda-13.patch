From 76edbc803606491e07fafcac56c09e9b98529bb2 Mon Sep 17 00:00:00 2001
From: "Yu-Hsiang M. Tsai" <yhmtsai@gmail.com>
Date: Mon, 1 Sep 2025 10:53:48 +0200
Subject: [PATCH 1/3] adapt find nvtx if CUDAToolkit_INCLUDE_DIRS contains more
 thane one

---
 cmake/Modules/FindNVTX.cmake | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/cmake/Modules/FindNVTX.cmake b/cmake/Modules/FindNVTX.cmake
index 17973c7be94..697f52ddbb6 100644
--- a/cmake/Modules/FindNVTX.cmake
+++ b/cmake/Modules/FindNVTX.cmake
@@ -27,11 +27,14 @@
 # ``NVTX_FOUND``
 #   If false, do not try to use the NVTX library.
 
-find_path(
-    NVTX3_INCLUDE_DIR
-    NAMES nvToolsExt.h
-    HINTS ${CUDAToolkit_INCLUDE_DIRS}/nvtx3
+# In some platforms, CUDAToolkit_INCLUDE_DIRS can contain more than one directory.
+# ${list}/suffix will only add suffix to the last one
+list(
+    TRANSFORM CUDAToolkit_INCLUDE_DIRS
+    APPEND "/nvtx3"
+    OUTPUT_VARIABLE NVTX3_INCLUDE_HINTS
 )
+find_path(NVTX3_INCLUDE_DIR NAMES nvToolsExt.h HINTS ${NVTX3_INCLUDE_HINTS})
 find_path(NVTX_INCLUDE_DIR NAMES nvToolsExt.h HINTS ${CUDAToolkit_INCLUDE_DIRS})
 mark_as_advanced(NVTX3_INCLUDE_DIR)
 mark_as_advanced(NVTX_INCLUDE_DIR)

From f704239f4412013ce4c30eb2ac5813dd798d6ef5 Mon Sep 17 00:00:00 2001
From: "Yu-Hsiang M. Tsai" <yhmtsai@gmail.com>
Date: Mon, 1 Sep 2025 10:59:37 +0200
Subject: [PATCH 2/3] adapt cuda 13 does not have thrust::identity<T>

---
 .../factorization/factorization_kernels.cpp       | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/common/cuda_hip/factorization/factorization_kernels.cpp b/common/cuda_hip/factorization/factorization_kernels.cpp
index d83a602ee16..440eb49cc79 100644
--- a/common/cuda_hip/factorization/factorization_kernels.cpp
+++ b/common/cuda_hip/factorization/factorization_kernels.cpp
@@ -588,12 +588,23 @@ void symbolic_validate(
             factors_lookup.storage.get_const_data(), found.get_data(),
             missing.get_data());
     }
+    auto get_bool_identity = []() {
+#if defined(CUDA_VERSION) && CUDA_VERSION >= 13000
+        // CUDA 13 remove thrust::identity<T>.
+        // Note. ::cuda::std::identity does not contain conversion like
+        // thrust::identity<T>. If conversion is required, we need to
+        // provide function for that.
+        return ::cuda::std::identity{};
+#else
+        return thrust::identity<bool>{};
+#endif
+    };
     valid = thrust::all_of(thrust_policy(exec), found.get_const_data(),
                            found.get_const_data() + found.get_size(),
-                           thrust::identity<bool>{}) &&
+                           get_bool_identity()) &&
             !thrust::any_of(thrust_policy(exec), missing.get_const_data(),
                             missing.get_const_data() + missing.get_size(),
-                            thrust::identity<bool>{});
+                            get_bool_identity());
 }
 
 GKO_INSTANTIATE_FOR_EACH_VALUE_AND_INDEX_TYPE(

From bf666edb80280836e7f4e2a032b9cbc7072db638 Mon Sep 17 00:00:00 2001
From: "Yu-Hsiang M. Tsai" <yhmtsai@gmail.com>
Date: Mon, 1 Sep 2025 11:00:17 +0200
Subject: [PATCH 3/3] cuda13 removes some error kind from cufft

---
 cuda/base/exception.cpp | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/cuda/base/exception.cpp b/cuda/base/exception.cpp
index 7bb7fae5bd5..12cd039d2ec 100644
--- a/cuda/base/exception.cpp
+++ b/cuda/base/exception.cpp
@@ -1,4 +1,4 @@
-// SPDX-FileCopyrightText: 2017 - 2024 The Ginkgo authors
+// SPDX-FileCopyrightText: 2017 - 2025 The Ginkgo authors
 //
 // SPDX-License-Identifier: BSD-3-Clause
 
@@ -6,6 +6,7 @@
 
 #include <string>
 
+#include <cuda.h>
 #include <cuda_runtime.h>
 #include <cublas_v2.h>
 #include <cufft.h>
@@ -114,13 +115,15 @@ std::string CufftError::get_error(int64 error_code)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_SETUP_FAILED)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_INVALID_SIZE)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_UNALIGNED_DATA)
-    GKO_REGISTER_CUFFT_ERROR(CUFFT_INCOMPLETE_PARAMETER_LIST)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_INVALID_DEVICE)
-    GKO_REGISTER_CUFFT_ERROR(CUFFT_PARSE_ERROR)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_NO_WORKSPACE)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_NOT_IMPLEMENTED)
-    GKO_REGISTER_CUFFT_ERROR(CUFFT_LICENSE_ERROR)
     GKO_REGISTER_CUFFT_ERROR(CUFFT_NOT_SUPPORTED)
+#if CUDA_VERSION < 13000
+    GKO_REGISTER_CUFFT_ERROR(CUFFT_INCOMPLETE_PARAMETER_LIST)
+    GKO_REGISTER_CUFFT_ERROR(CUFFT_PARSE_ERROR)
+    GKO_REGISTER_CUFFT_ERROR(CUFFT_LICENSE_ERROR)
+#endif
     return "Unknown error";
 
 #undef GKO_REGISTER_CUFFT_ERROR
