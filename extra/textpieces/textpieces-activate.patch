From e5749da080a777a815bebf01864d69802837560d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Wed, 2 Apr 2025 12:15:34 +0200
Subject: [PATCH] feat: add "new-window" command-line option

This allows the user to choose the desired action when the application is
launched: when the "new-window" command-line option is requested, a new
window will be opened, otherwise raise the existing window.
---
 ...gitlab.liferooter.TextPieces.desktop.in.in |  2 +-
 src/application.rs                            | 45 ++++++++++++++++---
 2 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/data/io.gitlab.liferooter.TextPieces.desktop.in.in b/data/io.gitlab.liferooter.TextPieces.desktop.in.in
index fa4299d..a4e065d 100644
--- a/data/io.gitlab.liferooter.TextPieces.desktop.in.in
+++ b/data/io.gitlab.liferooter.TextPieces.desktop.in.in
@@ -22,4 +22,4 @@ MimeType=text/plain;
 
 [Desktop Action new-window]
 Name=New Window
-Exec=textpieces
+Exec=textpieces --new-window
diff --git a/src/application.rs b/src/application.rs
index e24037a..1e4bf02 100644
--- a/src/application.rs
+++ b/src/application.rs
@@ -4,8 +4,9 @@
 
 use adw::prelude::*;
 use adw::subclass::prelude::*;
+use gettextrs::gettext;
 use smol::lock::{RwLockReadGuard, RwLockWriteGuard};
-use tracing::info;
+use tracing::{info, warn};
 
 use std::{
     iter::{self, repeat},
@@ -100,9 +101,39 @@ mod imp {
         type ParentType = adw::Application;
     }
 
-    impl ObjectImpl for Application {}
+    impl ObjectImpl for Application {
+        fn constructed(&self) {
+            self.parent_constructed();
+
+            self.obj().add_main_option(
+                "new-window",
+                glib::Char::from(b'w'),
+                glib::OptionFlags::NONE,
+                glib::OptionArg::None,
+                &gettext("Open a new window"),
+                None,
+            );
+        }
+    }
 
     impl ApplicationImpl for Application {
+        fn handle_local_options(&self, options: &glib::VariantDict) -> glib::ExitCode {
+            let app = self.obj();
+
+            if options.contains("new-window") {
+                if let Err(err) = app.register(None::<&gio::Cancellable>) {
+                    warn!("Failed to register the application: {err}");
+                }
+
+                if app.is_remote() {
+                    app.activate_action("new-window", None);
+                    return glib::ExitCode::SUCCESS;
+                }
+            }
+
+            self.parent_handle_local_options(options)
+        }
+
         /// Activation method.
         ///
         /// Called every time when
@@ -110,9 +141,13 @@ mod imp {
         fn activate(&self) {
             self.parent_activate();
 
-            // Open new window when user
-            // start the application
-            self.new_window();
+            // Open new window when user start the
+            // application or raise the existing one
+            if let Some(window) = self.obj().active_window() {
+                window.present();
+            } else {
+                self.new_window();
+            }
         }
 
         /// Startup method.
-- 
GitLab

