From 783329f420752ee4b9553690a7721b2717dd4386 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Sun, 30 Mar 2025 14:33:45 +0000
Subject: [PATCH] Add "new-window" command-line option

And specify the action in the desktop file. This allows application
launchers to provide direct access to this action. When the application is
launched without this option, raise the existing window instead of creating
a new one.
---
 ....gnome.design.AppIconPreview.desktop.in.in |  7 ++++
 src/application.rs                            | 40 ++++++++++++++++++-
 2 files changed, 46 insertions(+), 1 deletion(-)

diff --git a/data/org.gnome.design.AppIconPreview.desktop.in.in b/data/org.gnome.design.AppIconPreview.desktop.in.in
index 64f5c9c..630fd7b 100644
--- a/data/org.gnome.design.AppIconPreview.desktop.in.in
+++ b/data/org.gnome.design.AppIconPreview.desktop.in.in
@@ -11,3 +11,10 @@ Categories=Utility;GTK;GNOME;
 DBusActivatable=true
 MimeType=image/svg+xml;
 StartupWMClass=app-icon-preview
+Actions=new-window;
+
+[Desktop Action new-window]
+Exec=app-icon-preview --new-window
+Name=New Window
+# Translators: Do NOT translate or transliterate this text (this is an icon file name)!
+Icon=window-new
diff --git a/src/application.rs b/src/application.rs
index 5d77c92..d163562 100644
--- a/src/application.rs
+++ b/src/application.rs
@@ -16,8 +16,40 @@ mod imp {
         type ParentType = adw::Application;
         type Type = super::Application;
     }
-    impl ObjectImpl for Application {}
+
+    impl ObjectImpl for Application {
+        fn constructed(&self) {
+            self.parent_constructed();
+
+            self.obj().add_main_option(
+                "new-window",
+                glib::Char::from(b'w'),
+                glib::OptionFlags::NONE,
+                glib::OptionArg::None,
+                &gettext("Open a new window"),
+                None,
+            );
+        }
+    }
+
     impl ApplicationImpl for Application {
+        fn handle_local_options(&self, options: &glib::VariantDict) -> glib::ExitCode {
+            let app = self.obj();
+
+            if options.contains("new-window") {
+                if let Err(err) = app.register(None::<&gio::Cancellable>) {
+                    log::error!("Failed to register the application: {err}");
+                }
+
+                if app.is_remote() {
+                    app.activate_action("new-window", None);
+                    return glib::ExitCode::SUCCESS;
+                }
+            }
+
+            self.parent_handle_local_options(options)
+        }
+
         fn startup(&self) {
             self.parent_startup();
             // setup icon theme cache
@@ -52,6 +84,12 @@ mod imp {
         fn activate(&self) {
             self.parent_activate();
             let application = self.obj();
+
+            if let Some(window) = application.active_window() {
+                window.present();
+                return;
+            }
+
             let window = application.create_window();
             window.present();
         }
-- 
GitLab

