diff --git i/breezy/git/branch.py w/breezy/git/branch.py
index 840c145ee6..723d8f9686 100644
--- i/breezy/git/branch.py
+++ w/breezy/git/branch.py
@@ -1259,8 +1259,16 @@ class InterLocalGitRemoteGitBranch(InterGitBranch):
                 refs[tag_name_to_ref(name)] = sha
             return refs
 
+        # Wrapper to adapt dulwich Repo.generate_pack_data signature for dulwich >= 0.22
+        # Client expects: (have, want, ofs_delta)
+        # Repo provides: (have, want, progress=None, ofs_delta=None)
+        def generate_pack_data_wrapper(have, want, ofs_delta=True):
+            return self.source.repository._git.generate_pack_data(
+                have, want, progress=None, ofs_delta=ofs_delta
+            )
+
         dw_result = self.target.repository.send_pack(
-            get_changed_refs, self.source.repository._git.generate_pack_data
+            get_changed_refs, generate_pack_data_wrapper
         )
         if dw_result is not None and not isinstance(dw_result, dict):
             error = dw_result.ref_status.get(self.target.ref)
diff --git i/breezy/git/fetch.py w/breezy/git/fetch.py
index 02c1a8564a..c5fae6dfec 100644
--- i/breezy/git/fetch.py
+++ w/breezy/git/fetch.py
@@ -665,9 +665,9 @@ class DetermineWantsRecorder:
         self.wants = []
         self.remote_refs = {}
 
-    def __call__(self, refs):
+    def __call__(self, refs, depth=None):
         if type(refs) is not dict:
             raise TypeError(refs)
         self.remote_refs = refs
-        self.wants = self.actual(refs)
+        self.wants = self.actual(refs, depth)
         return self.wants
diff --git i/breezy/git/interrepo.py w/breezy/git/interrepo.py
index d7a86be2c0..809db8e2e8 100644
--- i/breezy/git/interrepo.py
+++ w/breezy/git/interrepo.py
@@ -366,8 +366,16 @@ class InterToRemoteGitRepository(InterToGitRepository):
 
         self._warn_slow()
         with self.source_store.lock_read():
+            # Wrapper to adapt generate_lossy_pack_data signature for dulwich >= 0.22
+            # Client expects: (have, want, ofs_delta)
+            # Method provides: (have, want, shallow=None, progress=None, get_tagged=None, ofs_delta=False)
+            def generate_pack_data_wrapper(have, want, ofs_delta=True):
+                return self.source_store.generate_lossy_pack_data(
+                    have, want, shallow=None, progress=None, get_tagged=None, ofs_delta=ofs_delta
+                )
+
             result = self.target.send_pack(
-                git_update_refs, self.source_store.generate_lossy_pack_data
+                git_update_refs, generate_pack_data_wrapper
             )
             for ref, error in result.ref_status.items():
                 if error:
@@ -408,7 +416,7 @@ class InterFromGitRepository(InterRepository):
     def get_determine_wants_heads(self, wants, include_tags=False, tag_selector=None):
         wants = set(wants)
 
-        def determine_wants(refs):
+        def determine_wants(refs, depth=None):
             unpeel_lookup = {}
             for k, v in refs.items():
                 if k.endswith(PEELED_TAG_SUFFIX):
@@ -431,7 +439,7 @@ class InterFromGitRepository(InterRepository):
 
         return determine_wants
 
-    def determine_wants_all(self, refs):
+    def determine_wants_all(self, refs, depth=None):
         raise NotImplementedError(self.determine_wants_all)
 
     @staticmethod
@@ -487,7 +495,7 @@ class InterGitNonGitRepository(InterFromGitRepository):
                 revids[revid] = sha
         return {revids[r] for r in self.target.has_revisions(revids)}
 
-    def determine_wants_all(self, refs):
+    def determine_wants_all(self, refs, depth=None):
         potential = set()
         for k, v in refs.items():
             # For non-git target repositories, only worry about peeled
@@ -754,7 +762,7 @@ class InterGitGitRepository(InterFromGitRepository):
         )
 
     def get_determine_wants_branches(self, branches, include_tags=False):
-        def determine_wants(refs):
+        def determine_wants(refs, depth=None):
             ret = []
             for name, value in refs.items():
                 if value == ZERO_SHA:
@@ -769,7 +777,7 @@ class InterGitGitRepository(InterFromGitRepository):
 
         return determine_wants
 
-    def determine_wants_all(self, refs):
+    def determine_wants_all(self, refs, depth=None):
         potential = {
             v
             for k, v in refs.items()
@@ -868,8 +876,16 @@ class InterLocalGitRemoteGitRepository(InterToGitRepository):
                 ret[name] = gitid
             return ret
 
+        # Wrapper to adapt dulwich Repo.generate_pack_data signature for dulwich >= 0.22
+        # Client expects: (have, want, ofs_delta)
+        # Repo provides: (have, want, progress=None, ofs_delta=None)
+        def generate_pack_data_wrapper(have, want, ofs_delta=True):
+            return self.source._git.generate_pack_data(
+                have, want, progress=None, ofs_delta=ofs_delta
+            )
+
         new_refs = self.target.send_pack(
-            git_update_refs, self.source._git.generate_pack_data
+            git_update_refs, generate_pack_data_wrapper
         )
         return None, self.old_refs, new_refs
 
diff --git i/breezy/git/remote.py w/breezy/git/remote.py
index 5b8097142b..a1a2f642a3 100644
--- i/breezy/git/remote.py
+++ w/breezy/git/remote.py
@@ -705,7 +705,7 @@ class RemoteGitDir(GitDir):
 
         with source_store.lock_read():
 
-            def generate_pack_data(have, want, progress=None, ofs_delta=True):
+            def generate_pack_data(have, want, ofs_delta=True, progress=None):
                 git_repo = getattr(source.repository, "_git", None)
                 if git_repo:
                     shallow = git_repo.get_shallow()
diff --git i/breezy/git/tests/test_workingtree.py w/breezy/git/tests/test_workingtree.py
index 87c6b32c61..8023d4af6c 100644
--- i/breezy/git/tests/test_workingtree.py
+++ w/breezy/git/tests/test_workingtree.py
@@ -47,7 +47,7 @@ def changes_between_git_tree_and_working_copy(
     """Determine the changes between a git tree and a working tree with index."""
     to_tree_sha, extras = target.git_snapshot(want_unversioned=want_unversioned)
     store = OverlayObjectStore([source_store, target.store])
-    return tree_changes(
+    changes = tree_changes(
         store,
         from_tree_sha,
         to_tree_sha,
@@ -55,7 +55,16 @@ def changes_between_git_tree_and_working_copy(
         rename_detector=rename_detector,
         want_unchanged=want_unchanged,
         change_type_same=True,
-    ), extras
+    )
+    # Convert TreeChange named tuples to plain tuples for dulwich >= 0.22.0
+    if dulwich_version >= (0, 22, 0):
+        changes = (
+            (c.type,
+             (c.old.path, c.old.mode, c.old.sha) if c.old else (None, None, None),
+             (c.new.path, c.new.mode, c.new.sha) if c.new else (None, None, None))
+            for c in changes
+        )
+    return changes, extras
 
 
 class GitWorkingTreeTests(TestCaseWithTransport):
diff --git i/breezy/git/tree.py w/breezy/git/tree.py
index ad05d83567..93071e8cba 100644
--- i/breezy/git/tree.py
+++ w/breezy/git/tree.py
@@ -26,6 +26,7 @@ from functools import partial
 from io import BytesIO
 from typing import Union
 
+from dulwich import __version__ as dulwich_version
 from dulwich.config import ConfigFile as GitConfigFile
 from dulwich.config import parse_submodules
 from dulwich.diff_tree import RenameDetector, tree_changes
@@ -1199,6 +1200,14 @@ class InterGitTrees(_mod_tree.InterTree):
                 want_unchanged=want_unchanged,
                 change_type_same=True,
             )
+            # Convert TreeChange named tuples to plain tuples for dulwich >= 0.22.0
+            if dulwich_version >= (0, 22, 0):
+                changes = (
+                    (c.type,
+                     (c.old.path, c.old.mode, c.old.sha) if c.old else (None, None, None),
+                     (c.new.path, c.new.mode, c.new.sha) if c.new else (None, None, None))
+                    for c in changes
+                )
             return changes, from_extras, to_extras
 
     def find_target_path(self, path, recurse="none"):
