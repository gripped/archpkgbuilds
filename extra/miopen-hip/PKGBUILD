# Maintainer: Torsten Ke√üler <tpkessler at archlinux dot org>
# Contributor: acxz <akashpatel at yahoo dot com>
# Contributor: JP-Ellis <josh@jpellis.me>

pkgname=miopen-hip
pkgver=6.4.3
pkgrel=1
# pin frugally-deep version as workaround workaround for https://github.com/ROCm/MIOpen/issues/3588
_fdeep_ver=0.15.31
pkgdesc="AMD's Machine Intelligence Library (HIP backend)"
arch=('x86_64')
url="https://rocm.docs.amd.com/projects/MIOpen/en/latest/index.html"
license=('MIT')
depends=('rocm-core' 'glibc' 'gcc-libs' 'hipblaslt' 'hipblas' 'rocblas' 'rocrand'
         'hip-runtime-amd' 'comgr' 'bzip2' 'composable-kernel' 'roctracer' 'sqlite')
makedepends=('cmake' 'git' 'git-lfs' 'ninja' 'rocm-cmake' 'boost' 'lbzip2'
             'nlohmann-json' 'eigen' 'functional-plus')
provides=('miopen')
conflicts=('miopen')
_git='https://github.com/ROCm/MIOpen'
_mlir='https://github.com/ROCm/rocMLIR'
source=(
  "${pkgname}::git+https://github.com/ROCm/MIOpen#tag=rocm-$pkgver"
  "${pkgname}-MIFin::git+https://github.com/ROCm/MIFin.git"
  "${pkgname}-rocmlir::git+https://github.com/ROCm/rocMLIR#tag=rocm-$pkgver"
  "${pkgname}-half::git+https://github.com/ROCm/half#tag=rocm-$pkgver"
  "${pkgname}-frugally-deep::git+https://github.com/Dobiasd/frugally-deep#tag=v$_fdeep_ver"
)
sha256sums=('ccb9d303537b7572196e60c6077965771716f7c2edac0644e5bf4f778bb7763f'
            'SKIP'
            '91451c3352320d088adaf2c4721ec0d7942248adfd22ad4a981a2f143fbee4fd'
            '16e5a6405dd766339a9409665cd1ccdaceed3c0cb7fe12835fa17bd3914aa6cd'
            'd1e1d55945eded7219c50f59f55967327118d6792df5a283c01131b18a3f061f')
options=(!lto)

prepare() {
  cd "$pkgname"
  git submodule init

  git config submodule."fin".url "${srcdir}/${pkgname}"-MIFin

  git -c protocol.file.allow=always submodule update --init --recursive

  # Disable tests as they require an AMD GPU at build time
  sed -i '/add_subdirectory(test)/d' CMakeLists.txt
}

build() {
  local fdeep_args=(
    -S $pkgname-frugally-deep
		-B build-frugally-deep
		-Wno-dev
		-DCMAKE_BUILD_TYPE=None
		-DCMAKE_INSTALL_PREFIX=/usr
    -DCMAKE_POLICY_VERSION_MINIMUM=3.5
  )
  cmake "${fdeep_args[@]}"
  cmake --build build-frugally-deep
  DESTDIR="$srcdir/deps" cmake --install build-frugally-deep

  local llvm_args=(
    -Wno-dev
    -G Ninja
    -B build-mlir
    -S "$pkgname-rocmlir"
    # -fcf-protection is not supported by HIP, see
    # https://rocm.docs.amd.com/projects/llvm-project/en/latest/reference/rocmcc.html#support-status-of-other-clang-options
    -D CMAKE_CXX_FLAGS="${CXXFLAGS} -fcf-protection=none"
    -D CMAKE_INSTALL_PREFIX=/usr
    -D CMAKE_BUILD_TYPE=Release
    -D CMAKE_C_COMPILER=amdclang
    -D CMAKE_CXX_COMPILER=amdclang++
    # Set ROCm test chipset to Vega in order to pass the configuration step.
    -D ROCM_TEST_CHIPSET=gfx900
    -D BUILD_FAT_LIBROCKCOMPILER=ON
    -D CMAKE_POLICY_VERSION_MINIMUM=3.5
  )
  cmake "${llvm_args[@]}"
  cmake --build build-mlir
  DESTDIR="$srcdir/deps" cmake --install build-mlir

  local half_args=(
    -Wno-dev
    -G Ninja
    -B build-half
    -S "$pkgname-half"
    -D CMAKE_INSTALL_PREFIX=/usr
    -D CMAKE_BUILD_TYPE=None
    -D CMAKE_POLICY_VERSION_MINIMUM=3.5
  )
  cmake "${half_args[@]}"
  cmake --build build-half
  DESTDIR="$srcdir/deps" cmake --install build-half

  # define NDEBUG to silence internal logging (mimics cmake release build)
  # https://rocmsoftwareplatform.github.io/MIOpen/doc/html/DebugAndLogging.html
  local cmake_args=(
    -Wno-dev
    -G Ninja
    -B build
    -S "$pkgname"
    -D CMAKE_CXX_FLAGS="${CXXFLAGS} -fcf-protection=none -DNDEBUG"
    -D CMAKE_INSTALL_PREFIX=/opt/rocm
    -D CMAKE_BUILD_TYPE=None
    -D CMAKE_C_COMPILER=amdclang
    -D CMAKE_CXX_COMPILER=amdclang++
    -D MIOPEN_BACKEND=HIP
    -D HALF_INCLUDE_DIR="$srcdir/deps/usr/include"
    -D CMAKE_PREFIX_PATH="$srcdir/deps/usr/lib/cmake"
    -D CMAKE_POLICY_VERSION_MINIMUM=3.5
  )
  cmake "${cmake_args[@]}"
  cmake --build build
}

package() {
  DESTDIR="$pkgdir" cmake --install build

  install -Dm644 "$pkgname/LICENSE.txt" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
