commit 2b5a6e3c1e0e572575442c1367e01c5893c1270c
Author: Robert Schiele <rschiele@gmail.com>
Date:   Sun Mar 30 14:31:31 2025 +0200

    fixes for newer CGAL
    
    There were some API changes with the newer CGAL library. This updates
    the code accordingly.

diff --git a/src/libslic3r/CutSurface.cpp b/src/libslic3r/CutSurface.cpp
index 57dfb85608..ebda600f97 100644
--- a/src/libslic3r/CutSurface.cpp
+++ b/src/libslic3r/CutSurface.cpp
@@ -1437,9 +1437,9 @@ priv::CutAOIs priv::cut_from_model(CutMesh                &cgal_model,
     // detect anomalities in visitor.
     bool is_valid = true;
     // NOTE: map are created when convert shapes to cgal model
-    const EdgeShapeMap& edge_shape_map = cgal_shape.property_map<EI, IntersectingElement>(edge_shape_map_name).first;
-    const FaceShapeMap& face_shape_map = cgal_shape.property_map<FI, IntersectingElement>(face_shape_map_name).first;
-    Visitor visitor{cgal_model, cgal_shape, edge_shape_map, face_shape_map, vert_shape_map, &is_valid};
+    auto edge_shape_map = cgal_shape.property_map<EI, IntersectingElement>(edge_shape_map_name);
+    auto face_shape_map = cgal_shape.property_map<FI, IntersectingElement>(face_shape_map_name);
+    Visitor visitor{cgal_model, cgal_shape, edge_shape_map.value(), face_shape_map.value(), vert_shape_map, &is_valid};
 
     // a property map containing the constrained-or-not status of each edge
     EdgeBoolMap ecm = cgal_model.add_property_map<EI, bool>(is_constrained_edge_name, false).first;
@@ -1587,8 +1587,10 @@ void priv::collect_surface_data(std::queue<FI>  &process,
 
 void priv::create_reduce_map(ReductionMap &reduction_map, const CutMesh &mesh)
 {
-    const VertexShapeMap &vert_shape_map = mesh.property_map<VI, const IntersectingElement*>(vert_shape_map_name).first;
-    const EdgeBoolMap &ecm = mesh.property_map<EI, bool>(is_constrained_edge_name).first;
+    auto optional_vert_shape_map = mesh.property_map<VI, const IntersectingElement*>(vert_shape_map_name);
+    const VertexShapeMap &vert_shape_map = optional_vert_shape_map.value();
+    auto optional_ecm = mesh.property_map<EI, bool>(is_constrained_edge_name);
+    const EdgeBoolMap &ecm = optional_ecm.value();
 
     // check if vertex was made by edge_2 which is diagonal of quad
     auto is_reducible_vertex = [&vert_shape_map](VI reduction_from) -> bool {
@@ -1772,11 +1774,13 @@ priv::VDistances priv::calc_distances(const SurfacePatches &patches,
     priv::VDistances result(count_shapes_points);
     for (const SurfacePatch &patch : patches) {
         // map is created during intersection by corefine visitor
-        const VertexShapeMap &vert_shape_map = 
-            models[patch.model_id].property_map<VI, const IntersectingElement *>(vert_shape_map_name).first;
+        auto optional_vert_shape_map =
+            models[patch.model_id].property_map<VI, const IntersectingElement *>(vert_shape_map_name);
+        const VertexShapeMap &vert_shape_map = optional_vert_shape_map.value();
         uint32_t patch_index = &patch - &patches.front();
         // map is created during patch creation / dividing
-        const CvtVI2VI& cvt = patch.mesh.property_map<VI, VI>(patch_source_name).first;
+        auto optional_cvt = patch.mesh.property_map<VI, VI>(patch_source_name);
+        const CvtVI2VI& cvt = optional_cvt.value();
         // for each point on outline
         for (const Loop &loop : patch.loops) 
         for (const VI &vi_patch : loop) {
@@ -2785,7 +2789,7 @@ using BBS = std::vector<BoundingBoxf3>;
 BBS create_bbs(const VCutAOIs &cuts, const CutMeshes &cut_models);
 
 using Primitive = CGAL::AABB_face_graph_triangle_primitive<CutMesh>;
-using Traits    = CGAL::AABB_traits<EpicKernel, Primitive>;
+using Traits    = CGAL::AABB_traits_3<EpicKernel, Primitive>;
 using Ray       = EpicKernel::Ray_3;
 using Tree      = CGAL::AABB_tree<Traits>;
 using Trees     = std::vector<Tree>;
@@ -2939,7 +2943,8 @@ bool priv::is_patch_inside_of_model(const SurfacePatch &patch,
 uint32_t priv::get_shape_point_index(const CutAOI &cut, const CutMesh &model)
 {
     // map is created during intersection by corefine visitor
-    const VertexShapeMap &vert_shape_map = model.property_map<VI, const IntersectingElement *>(vert_shape_map_name).first;
+    auto optional_vert_shape_map = model.property_map<VI, const IntersectingElement *>(vert_shape_map_name);
+    const VertexShapeMap &vert_shape_map = optional_vert_shape_map.value();
     // for each half edge of outline
     for (HI hi : cut.second) {
         VI vi = model.source(hi);
@@ -2964,7 +2969,7 @@ priv::SurfacePatch priv::separate_patch(const std::vector<FI>& fis,
     patch_new.model_id     = patch.model_id;
     patch_new.shape_id     = patch.shape_id;
     // fix cvt
-    CvtVI2VI cvt = patch_new.mesh.property_map<VI, VI>(patch_source_name).first;
+    CvtVI2VI cvt = patch_new.mesh.property_map<VI, VI>(patch_source_name).value();
     for (VI &vi : cvt) {
         if (!vi.is_valid()) continue;
         vi = cvt_from[vi];
@@ -2984,7 +2989,8 @@ void priv::divide_patch(size_t i, SurfacePatchesEx &patches)
     std::string patch_number_name = "f:patch_number";
     CutMesh::Property_map<FI,bool> is_processed = cm.add_property_map<FI, bool>(patch_number_name, false).first;
     
-    const CvtVI2VI& cvt_from = patch.mesh.property_map<VI, VI>(patch_source_name).first;
+    auto optional_cvt_from = patch.mesh.property_map<VI, VI>(patch_source_name);
+    const CvtVI2VI& cvt_from = optional_cvt_from.value();
 
     std::vector<FI> fis;
     fis.reserve(cm.faces().size());
@@ -3171,7 +3177,8 @@ bool priv::is_over_whole_expoly(const CutAOI    &cutAOI,
                                 const CutMesh   &mesh)
 {
     // NonInterupted contour is without other point and contain all from shape    
-    const VertexShapeMap &vert_shape_map = mesh.property_map<VI, const IntersectingElement*>(vert_shape_map_name).first;
+    auto optional_vert_shape_map = mesh.property_map<VI, const IntersectingElement*>(vert_shape_map_name);
+    const VertexShapeMap &vert_shape_map = optional_vert_shape_map.value();
     for (HI hi : cutAOI.second) { 
         const IntersectingElement *ie_s = vert_shape_map[mesh.source(hi)];
         const IntersectingElement *ie_t = vert_shape_map[mesh.target(hi)];
diff --git a/tests/libslic3r/test_emboss.cpp b/tests/libslic3r/test_emboss.cpp
index cdac9b3d73..1d3d145a86 100644
--- a/tests/libslic3r/test_emboss.cpp
+++ b/tests/libslic3r/test_emboss.cpp
@@ -906,7 +906,7 @@ TEST_CASE("Emboss extrude cut", "[Emboss-Cut]")
     // identify glyph for intersected vertex
     std::string vert_shape_map_name = "v:glyph_id";
     MyMesh cgal_object = MeshBoolean::cgal2::to_cgal(cube, face_map_name);
-    auto face_map = cgal_object.property_map<MyMesh::Face_index, int32_t>(face_map_name).first;
+    auto face_map = cgal_object.property_map<MyMesh::Face_index, int32_t>(face_map_name).value();
     auto vert_shape_map = cgal_object.add_property_map<MyMesh::Vertex_index, IntersectingElemnt>(vert_shape_map_name).first;
 
     std::string edge_shape_map_name = "e:glyph_id";
@@ -915,8 +915,8 @@ TEST_CASE("Emboss extrude cut", "[Emboss-Cut]")
 
     MyMesh cgal_shape = MeshBoolean::cgal2::to_cgal(shape, projection, 0, edge_shape_map_name, face_shape_map_name, glyph_contours);    
 
-    auto edge_shape_map = cgal_shape.property_map<MyMesh::Edge_index, IntersectingElemnt>(edge_shape_map_name).first;
-    auto face_shape_map = cgal_shape.property_map<MyMesh::Face_index, IntersectingElemnt>(face_shape_map_name).first;
+    auto edge_shape_map = cgal_shape.property_map<MyMesh::Edge_index, IntersectingElemnt>(edge_shape_map_name).value();
+    auto face_shape_map = cgal_shape.property_map<MyMesh::Face_index, IntersectingElemnt>(face_shape_map_name).value();
 
     // bool map for affected edge
     using d_prop_bool = CGAL::dynamic_edge_property_t<bool>;
